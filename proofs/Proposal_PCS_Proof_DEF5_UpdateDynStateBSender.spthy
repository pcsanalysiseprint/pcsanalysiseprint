theory Proposal begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2

tactic: StateA
presort: s
prio: {id}
  regex"HonestStepA\(" | regex"HonestStep"
prio: {id}
  regex"CreateDynamicState\("
prio: {id}
  regex"DynamicStateA\("


tactic: StateB
presort: s
prio: {id}
  regex"HonestStepB\(" | regex"HonestStep"
prio: {id}
  regex"CreateDynamicState\("
prio: {id}
  regex"DynamicStateB\("


tactic: State
presort: s
prio: {id}
  regex"HonestStepA\(" | regex"HonestStepB\(" | regex"HonestStep\("
prio: {id}
  regex"CreateDynamicState\("
prio: {id}
  regex"DynamicStateA\(" | regex"DynamicStateB\("


tactic: CompromisedStateA
presort: s
prio: {id}
  regex"AttackerStepA\(" | regex"AttackerStep"
prio: {id}
  regex"CreateDynamicState\("
prio: {id}
  regex"DynamicStateA\(" | regex"DynamicStateB"


tactic: StepCreateDynamicStateOrdered
presort: s
prio: {id}
  regex"Step\("
prio: {id}
  regex"CreateDynamicState\("


tactic: HonestStep
presort: s
prio: {id}
  regex"HonestStepA\(" | regex"HonestStepB\(" | regex"HonestStep\("
prio: {id}
  regex"!UpdateDynamicStateA\(" | regex"!UpdateDynamicStateB\("


tactic: AttackerStep
presort: s
prio: {id}
  regex"AttackerStepA\(" | regex"AttackerStepB\(" | regex"AttackerStep\("
prio: {id}
  regex"!UpdateDynamicStateA\(" | regex"!UpdateDynamicStateB\("


tactic: PCS
presort: s
prio: {id}
  regex"!CompromisedDevice\("
prio: {id}
  regex"ReceiveOrSend\(" | regex"AttackerKnows\("





/*
looping facts with injective instances:
  CompromisedDynamicStateA/7, CompromisedDynamicStateB/7,
  DynamicStateA/6, DynamicStateB/6
*/

rule (modulo E) CreateUser:
   [ Fr( ~id ) ] --> [ !User( ~id ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) CreateUserDevice:
   [ Fr( ~did ), !User( ~uid ) ]
  --[ CreatedUserDevice( ~uid, ~did ) ]->
   [ !UserDevice( ~uid, ~did ) ]

  /* has exactly the trivial AC variant */

restriction SingleDevicePerUser:
  "∀ uid did1 did2 #i #j.
    ((CreatedUserDevice( uid, did1 ) @ #i) ∧
     (CreatedUserDevice( uid, did2 ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) CreateDynamicState:
   [
   !UserDevice( ~uidA, ~idA ), !UserDevice( ~uidB, ~idB ), Fr( ~rk ),
   Fr( ~next_rk ), Fr( ~sid )
   ]
  --[
  CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, <~rk, ~next_rk>
  ),
  HonestCreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                            <~rk, ~next_rk>
  )
  ]->
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <~rk, ~next_rk> ),
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <~rk, ~next_rk> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) UpdateDynamicStateA_Sender:
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>
   ),
   Fr( ~new_rootkey )
   ]
  --[
  UpdateDynamicStateA_Sender( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                              <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  ReceiveOrSend( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>,
                 <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
              <<old_keys, latest>, ~new_rootkey>
  ),
  HonestSendStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                  <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStepA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
               <<old_keys, latest>, ~new_rootkey>
  )
  ]->
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                  <<old_keys, latest>, ~new_rootkey>
   ),
   !UpdateDynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction NoConsecutiveSendingPhasesA:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, old_rk,
                                  new_rk
      ) @ #i) ∧
     (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, new_rk,
                                  next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

rule (modulo E) UpdateDynamicStateB_Receiver:
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>
   ),
   !UpdateDynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]
  --[
  UpdateDynamicStateB_Receiver( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  ReceiveOrSend( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>,
                 <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
              <<old_keys, latest>, ~new_rootkey>
  ),
  HonestReceiveStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                     <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStepB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
               <<old_keys, latest>, ~new_rootkey>
  )
  ]->
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                  <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction NoConsecutiveReceivingPhasesB:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, old_rk,
                                    new_rk
      ) @ #i) ∧
     (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                    next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

rule (modulo E) UpdateDynamicStateB_Sender:
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>
   ),
   Fr( ~new_rootkey )
   ]
  --[
  UpdateDynamicStateB_Sender( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                              <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  ReceiveOrSend( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>,
                 <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
              <<old_keys, latest>, ~new_rootkey>
  ),
  HonestSendStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                  <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStepB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
               <<old_keys, latest>, ~new_rootkey>
  )
  ]->
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                  <<old_keys, latest>, ~new_rootkey>
   ),
   !UpdateDynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction NoConsecutiveSendingPhasesB:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, old_rk,
                                  new_rk
      ) @ #i) ∧
     (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, new_rk,
                                  next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

rule (modulo E) UpdateDynamicStateA_Receiver:
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>
   ),
   !UpdateDynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]
  --[
  UpdateDynamicStateA_Receiver( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  ReceiveOrSend( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>,
                 <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
              <<old_keys, latest>, ~new_rootkey>
  ),
  HonestReceiveStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                     <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStepA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
               <<old_keys, latest>, ~new_rootkey>
  )
  ]->
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                  <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction NoConsecutiveReceivingPhasesA:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, old_rk,
                                    new_rk
      ) @ #i) ∧
     (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                    next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

rule (modulo E) CompromiseDevice[color=#ea3546]:
   [ !UserDevice( ~uid, ~did ) ]
  --[ CompromiseDevice( ~uid, ~did ) ]->
   [ !CompromisedDevice( ~uid, ~did ) ]

  /* has exactly the trivial AC variant */

restriction SingleCompromiseForSameKeyMaterial:
  "∀ cid1 cid2 sid uidA idA uidB idB rk #i #j.
    ((CompromiseDynamicStateAOrB( cid1, sid, uidA, idA, uidB, idB, rk
      ) @ #i) ∧
     (CompromiseDynamicStateAOrB( cid2, sid, uidA, idA, uidB, idB, rk
      ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) AttackerCreateDynamicStateB[color=#ea3546]:
   [
   !UserDevice( ~uidA, ~idA ), !CompromisedDevice( ~uidB, ~idB ),
   Fr( ~rk ), Fr( ~next_rk ), Fr( ~sid ), Fr( ~cid )
   ]
  --[
  CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, <~rk, ~next_rk>
  ),
  AttackerCreateDynamicStateB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                               <~rk, ~next_rk>
  )
  ]->
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <~rk, ~next_rk> ),
   CompromisedDynamicStateB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <~rk, ~next_rk>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) AttackerCreateDynamicStateA[color=#ea3546]:
   [
   !CompromisedDevice( ~uidA, ~idA ), !UserDevice( ~uidB, ~idB ),
   Fr( ~rk ), Fr( ~next_rk ), Fr( ~sid ), Fr( ~cid )
   ]
  --[
  CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, <~rk, ~next_rk>
  ),
  AttackerCreateDynamicStateA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                               <~rk, ~next_rk>
  )
  ]->
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <~rk, ~next_rk> ),
   CompromisedDynamicStateA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <~rk, ~next_rk>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) CompromiseDynamicStateA[color=#ea3546]:
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>
   ),
   Fr( ~cid )
   ]
  --[
  CompromiseA( ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  CompromiseDynamicStateA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                           <old_keys, latest>
  ),
  CompromiseAOrB( ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  CompromiseDynamicStateAOrB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                              <old_keys, latest>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  StepA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  HonestStepA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  AttackerKnows( <old_keys, latest> )
  ]->
   [
   CompromisedDynamicStateA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <old_keys, latest>
   ),
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) CompromiseDynamicStateB[color=#ea3546]:
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>
   ),
   Fr( ~cid )
   ]
  --[
  CompromiseB( ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  CompromiseDynamicStateB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                           <old_keys, latest>
  ),
  CompromiseAOrB( ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  CompromiseDynamicStateAOrB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                              <old_keys, latest>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  StepB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  HonestStepB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> ),
  AttackerKnows( <old_keys, latest> )
  ]->
   [
   CompromisedDynamicStateB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <old_keys, latest>
   ),
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AttackerUpdateDynamicStateA_Sender[color=#ea3546]:
   [
   CompromisedDynamicStateA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <old_keys, latest>
   ),
   Fr( ~new_rootkey )
   ]
  --[
  AttackerUpdateDynamicStateA_Sender( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                      <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerStep( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerStepA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                 <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerKnows( <<old_keys, latest>, ~new_rootkey> )
  ]->
   [
   CompromisedDynamicStateA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <<old_keys, latest>, ~new_rootkey>
   ),
   !UpdateDynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AttackerUpdateDynamicStateB_Receiver[color=#ea3546]:
   [
   CompromisedDynamicStateB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <old_keys, latest>
   ),
   !UpdateDynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]
  --[
  AttackerUpdateDynamicStateB_Receiver( ~sid, ~uidA, ~idA, ~uidB,
                                        ~idB, <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerStep( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerStepB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                 <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerKnows( <<old_keys, latest>, ~new_rootkey> )
  ]->
   [
   CompromisedDynamicStateB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AttackerUpdateDynamicStateB_Sender[color=#ea3546]:
   [
   CompromisedDynamicStateB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <old_keys, latest>
   ),
   Fr( ~new_rootkey )
   ]
  --[
  AttackerUpdateDynamicStateB_Sender( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                      <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerStep( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerStepB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                 <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerKnows( <<old_keys, latest>, ~new_rootkey> )
  ]->
   [
   CompromisedDynamicStateB( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <<old_keys, latest>, ~new_rootkey>
   ),
   !UpdateDynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) AttackerUpdateDynamicStateA_Receiver[color=#ea3546]:
   [
   CompromisedDynamicStateA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <old_keys, latest>
   ),
   !UpdateDynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]
  --[
  AttackerUpdateDynamicStateA_Receiver( ~sid, ~uidA, ~idA, ~uidB,
                                        ~idB, <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerStep( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerStepA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                 <<old_keys, latest>, ~new_rootkey>
  ),
  AttackerKnows( <<old_keys, latest>, ~new_rootkey> )
  ]->
   [
   CompromisedDynamicStateA( ~cid, ~sid, ~uidA, ~idA, ~uidB, ~idB,
                             <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) DynamicStateLossA:
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> )
   ]
  --[
  DynamicStateLossA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                     <old_keys, latest>
  )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) DynamicStateLossB:
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest> )
   ]
  --[
  DynamicStateLossB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                     <old_keys, latest>
  )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) StaticStateLoss:
   [ !UserDevice( ~uid, ~did ) ]
  --[ StaticStateLoss( ~uid, ~did ) ]->
   [ ]

  /* has exactly the trivial AC variant */

restriction StaticStateLossTerminatesDynamicStateA:
  "∀ sid uidA idA uidB idB rks #i #j.
    (((StaticStateLoss( uidA, idA ) @ #i) ∧
      (HonestStep( sid, uidA, idA, uidB, idB, rks ) @ #j)) ∧
     (#i < #j)) ⇒
    (∃ #h.
      ((StaticStateRecovery( uidA, idA ) @ #h) ∧ (#i < #h)) ∧ (#h < #j))"

restriction StaticStateLossTerminatesDynamicStateB:
  "∀ sid uidA idA uidB idB rks #i #j.
    (((StaticStateLoss( uidB, idB ) @ #i) ∧
      (HonestStep( sid, uidA, idA, uidB, idB, rks ) @ #j)) ∧
     (#i < #j)) ⇒
    (∃ #h.
      ((StaticStateRecovery( uidB, idB ) @ #h) ∧ (#i < #h)) ∧ (#h < #j))"

rule (modulo E) StaticStateRecovery:
   [ !UserDevice( ~uid, ~did ) ]
  --[ StaticStateRecovery( ~uid, ~did ) ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) UpdateDynamicStateB_Receiver_OOO:
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>
   ),
   !UpdateDynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]
  --[
  UpdateDynamicStateB_Receiver_OOO( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                    <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
              <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStepB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
               <<old_keys, latest>, ~new_rootkey>
  )
  ]->
   [
   DynamicStateB( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                  <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) UpdateDynamicStateA_Receiver_OOO:
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB, <old_keys, latest>
   ),
   !UpdateDynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                         <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
   )
   ]
  --[
  UpdateDynamicStateA_Receiver_OOO( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                    <old_keys, latest>, <<old_keys, latest>, ~new_rootkey>
  ),
  Step( ~sid, ~uidA, ~idA, ~uidB, ~idB,
        <<old_keys, latest>, ~new_rootkey>
  ),
  StepA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
         <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStep( ~sid, ~uidA, ~idA, ~uidB, ~idB,
              <<old_keys, latest>, ~new_rootkey>
  ),
  HonestStepA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
               <<old_keys, latest>, ~new_rootkey>
  )
  ]->
   [
   DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                  <<old_keys, latest>, ~new_rootkey>
   )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction SequentialSessions_Sending:
  "∀ sid1 sid2 uidA idA uidB idB rk1 rk2 rk3 #i #j #k.
    (((((CreateDynamicState( sid1, uidA, idA, uidB, idB, rk1 ) @ #i) ∧
        (CreateDynamicState( sid2, uidA, idA, uidB, idB, rk2 ) @ #j)) ∧
       (#i < #j)) ∧
      (HonestSendStep( sid1, uidA, idA, uidB, idB, rk3 ) @ #k)) ∧
     (#j < #k)) ⇒
    (⊥)"
  // safety formula

restriction SequentialSessions_Receiving:
  "∀ sid1 sid2 uidA idA uidB idB rk1 rk2 rk3 #i #j #k.
    (((((CreateDynamicState( sid1, uidA, idA, uidB, idB, rk1 ) @ #i) ∧
        (CreateDynamicState( sid2, uidA, idA, uidB, idB, rk2 ) @ #j)) ∧
       (#i < #j)) ∧
      (HonestReceiveStep( sid1, uidA, idA, uidB, idB, rk3 ) @ #k)) ∧
     (#j < #k)) ⇒
    (⊥)"
  // safety formula

restriction NoConsecutiveReceivingPhasesB1:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, old_rk,
                                    new_rk
      ) @ #i) ∧
     (UpdateDynamicStateB_Receiver_OOO( sid, uidA, idA, uidB, idB,
                                        new_rk, next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

restriction NoConsecutiveReceivingPhasesB2:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateB_Receiver_OOO( sid, uidA, idA, uidB, idB,
                                        old_rk, new_rk
      ) @ #i) ∧
     (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                    next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

restriction NoConsecutiveReceivingPhasesB3:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateB_Receiver_OOO( sid, uidA, idA, uidB, idB,
                                        old_rk, new_rk
      ) @ #i) ∧
     (UpdateDynamicStateB_Receiver_OOO( sid, uidA, idA, uidB, idB,
                                        new_rk, next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

restriction NoConsecutiveReceivingPhasesA1:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, old_rk,
                                    new_rk
      ) @ #i) ∧
     (UpdateDynamicStateA_Receiver_OOO( sid, uidA, idA, uidB, idB,
                                        new_rk, next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

restriction NoConsecutiveReceivingPhasesA2:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateA_Receiver_OOO( sid, uidA, idA, uidB, idB,
                                        old_rk, new_rk
      ) @ #i) ∧
     (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                    next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

restriction NoConsecutiveReceivingPhasesA3:
  "∀ sid uidA idA uidB idB old_rk new_rk next_rk #i #j.
    ((UpdateDynamicStateA_Receiver_OOO( sid, uidA, idA, uidB, idB,
                                        old_rk, new_rk
      ) @ #i) ∧
     (UpdateDynamicStateA_Receiver_OOO( sid, uidA, idA, uidB, idB,
                                        new_rk, next_rk
      ) @ #j)) ⇒
    (⊥)"
  // safety formula

restriction OutOfOrderA:
  "∀ sid1 sid2 sid3 uidA idA uidB idB rk1 rk2 rk3 rk4 rk5 #i #j #k
     #l.
    (((((((CreateDynamicState( sid1, uidA, idA, uidB, idB, rk1
           ) @ #i) ∧
          (CreateDynamicState( sid2, uidA, idA, uidB, idB, rk2 ) @ #j)) ∧
         (#i < #j)) ∧
        (CreateDynamicState( sid3, uidA, idA, uidB, idB, rk3 ) @ #k)) ∧
       (#j < #k)) ∧
      (UpdateDynamicStateA_Receiver_OOO( sid1, uidA, idA, uidB, idB, rk4,
                                         rk5
       ) @ #l)) ∧
     (#k < #l)) ⇒
    (⊥)"
  // safety formula

restriction OutOfOrderB:
  "∀ sid1 sid2 sid3 uidA idA uidB idB rk1 rk2 rk3 rk4 rk5 #i #j #k
     #l.
    (((((((CreateDynamicState( sid1, uidA, idA, uidB, idB, rk1
           ) @ #i) ∧
          (CreateDynamicState( sid2, uidA, idA, uidB, idB, rk2 ) @ #j)) ∧
         (#i < #j)) ∧
        (CreateDynamicState( sid3, uidA, idA, uidB, idB, rk3 ) @ #k)) ∧
       (#j < #k)) ∧
      (UpdateDynamicStateB_Receiver_OOO( sid1, uidA, idA, uidB, idB, rk4,
                                         rk5
       ) @ #l)) ∧
     (#k < #l)) ⇒
    (⊥)"
  // safety formula

lemma SANITY_OOO_ReceiveA:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk #i.
    UpdateDynamicStateA_Receiver_OOO( sid, uidA, idA, uidB, idB, rk,
                                      new_rk
    ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk #i.
  (UpdateDynamicStateA_Receiver_OOO( sid, uidA, idA, uidB, idB, rk,
                                     new_rk
   ) @ #i)"
*/
by sorry

lemma SANITY_OOO_ReceiveB:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk #i.
    UpdateDynamicStateB_Receiver_OOO( sid, uidA, idA, uidB, idB, rk,
                                      new_rk
    ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk #i.
  (UpdateDynamicStateB_Receiver_OOO( sid, uidA, idA, uidB, idB, rk,
                                     new_rk
   ) @ #i)"
*/
by sorry

lemma SANITY_RatchetASender:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk #i #j.
    (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
     ) @ #i) ∧
    (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, rk,
                                   new_rk
     ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk #i #j.
  (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
   ) @ #i) ∧
  (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, rk,
                                 new_rk
   ) @ #j)"
*/
by sorry

lemma SANITY_RatchetBSender:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk #i #j.
    (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
     ) @ #i) ∧
    (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                   new_rk
     ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk #i #j.
  (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
   ) @ #i) ∧
  (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                 new_rk
   ) @ #j)"
*/
by sorry

lemma SANITY_RatchetContinued:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk next_rk #i #j #k #l.
    ((((((UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk,
                                      new_rk
          ) @ #i) ∧
         (#i < #j)) ∧
        (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                       new_rk
         ) @ #j)) ∧
       (#j < #k)) ∧
      (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, new_rk,
                                   next_rk
       ) @ #k)) ∧
     (#k < #l)) ∧
    (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                   next_rk
     ) @ #l)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk next_rk #i #j #k #l.
  (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
   ) @ #i) ∧
  (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                 new_rk
   ) @ #j) ∧
  (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, new_rk,
                               next_rk
   ) @ #k) ∧
  (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                 next_rk
   ) @ #l)
 ∧
  (#i < #j) ∧ (#j < #k) ∧ (#k < #l)"
*/
by sorry

lemma SANITY_RatchetCompromisedASender:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk #i #j.
    (AttackerUpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, rk,
                                         new_rk
     ) @ #i) ∧
    (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, rk,
                                   new_rk
     ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk #i #j.
  (AttackerUpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, rk,
                                       new_rk
   ) @ #i) ∧
  (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, rk,
                                 new_rk
   ) @ #j)"
*/
by sorry

lemma SANITY_RatchetCompromisedBSender:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk #i #j.
    (AttackerUpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk,
                                         new_rk
     ) @ #i) ∧
    (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                   new_rk
     ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk #i #j.
  (AttackerUpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk,
                                       new_rk
   ) @ #i) ∧
  (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                 new_rk
   ) @ #j)"
*/
by sorry

lemma SANITY_RatchetCompromisedContinued:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk next_rk #i #j #k #l.
    (((UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk,
                                   new_rk
       ) @ #i) ∧
      (AttackerUpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB,
                                             rk, new_rk
       ) @ #j)) ∧
     (AttackerUpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB,
                                          new_rk, next_rk
      ) @ #k)) ∧
    (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                   next_rk
     ) @ #l)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk next_rk #i #j #k #l.
  (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
   ) @ #i) ∧
  (AttackerUpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB,
                                         rk, new_rk
   ) @ #j) ∧
  (AttackerUpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB,
                                       new_rk, next_rk
   ) @ #k) ∧
  (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                 next_rk
   ) @ #l)"
*/
by sorry

lemma SANITY_AttackerCreateDynamicStateRatchetCompromisedContinued:
  exists-trace
  "∃ cid sid uidA idA uidB idB rk new_rk next_rk #h #i #j #k #l.
    ((((AttackerCreateDynamicStateA( cid, sid, uidA, idA, uidB, idB, rk
        ) @ #h) ∧
       (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
        ) @ #i)) ∧
      (AttackerUpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB,
                                             rk, new_rk
       ) @ #j)) ∧
     (AttackerUpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB,
                                          new_rk, next_rk
      ) @ #k)) ∧
    (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                   next_rk
     ) @ #l)"
/*
guarded formula characterizing all satisfying traces:
"∃ cid sid uidA idA uidB idB rk new_rk next_rk #h #i #j #k #l.
  (AttackerCreateDynamicStateA( cid, sid, uidA, idA, uidB, idB, rk
   ) @ #h) ∧
  (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
   ) @ #i) ∧
  (AttackerUpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB,
                                         rk, new_rk
   ) @ #j) ∧
  (AttackerUpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB,
                                       new_rk, next_rk
   ) @ #k) ∧
  (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                 next_rk
   ) @ #l)"
*/
by sorry

lemma SANITY_DynamicStateLossAPossible:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk next_rk #i #j #k #l #m.
    ((((UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk,
                                    new_rk
        ) @ #i) ∧
       (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                      new_rk
        ) @ #j)) ∧
      (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, new_rk,
                                   next_rk
       ) @ #k)) ∧
     (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                    next_rk
      ) @ #l)) ∧
    (DynamicStateLossA( sid, uidA, idA, uidB, idB, next_rk ) @ #m)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk next_rk #i #j #k #l #m.
  (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
   ) @ #i) ∧
  (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                 new_rk
   ) @ #j) ∧
  (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, new_rk,
                               next_rk
   ) @ #k) ∧
  (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                 next_rk
   ) @ #l) ∧
  (DynamicStateLossA( sid, uidA, idA, uidB, idB, next_rk ) @ #m)"
*/
by sorry

lemma SANITY_DynamicStateLossBPossible [heuristic=C]:
  exists-trace
  "∃ sid uidA idA uidB idB rk new_rk next_rk #i #j #k #l #m.
    ((((UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk,
                                    new_rk
        ) @ #i) ∧
       (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                      new_rk
        ) @ #j)) ∧
      (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, new_rk,
                                   next_rk
       ) @ #k)) ∧
     (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                    next_rk
      ) @ #l)) ∧
    (DynamicStateLossB( sid, uidA, idA, uidB, idB, next_rk ) @ #m)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid uidA idA uidB idB rk new_rk next_rk #i #j #k #l #m.
  (UpdateDynamicStateB_Sender( sid, uidA, idA, uidB, idB, rk, new_rk
   ) @ #i) ∧
  (UpdateDynamicStateA_Receiver( sid, uidA, idA, uidB, idB, rk,
                                 new_rk
   ) @ #j) ∧
  (UpdateDynamicStateA_Sender( sid, uidA, idA, uidB, idB, new_rk,
                               next_rk
   ) @ #k) ∧
  (UpdateDynamicStateB_Receiver( sid, uidA, idA, uidB, idB, new_rk,
                                 next_rk
   ) @ #l) ∧
  (DynamicStateLossB( sid, uidA, idA, uidB, idB, next_rk ) @ #m)"
*/
by sorry

lemma PROVE_StepCreateDynamicStateOrdered [use_induction,
                                           heuristic={StepCreateDynamicStateOrdered}, reuse]:
  all-traces
  "∀ sid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i #j.
    ((CreateDynamicState( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
     (Step( sid, uidA2, idA2, uidB2, idB2, rk2 ) @ #j)) ⇒
    (((((#i < #j) ∧ (uidA1 = uidA2)) ∧ (idA1 = idA2)) ∧
      (uidB1 = uidB2)) ∧
     (idB1 = idB2))"
/*
guarded formula characterizing all counter-examples:
"∃ sid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i #j.
  (CreateDynamicState( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
  (Step( sid, uidA2, idA2, uidB2, idB2, rk2 ) @ #j)
 ∧
  ((¬(#i < #j)) ∨
   (¬(uidA1 = uidA2)) ∨
   (¬(idA1 = idA2)) ∨
   (¬(uidB1 = uidB2)) ∨
   (¬(idB1 = idB2)))"
*/
by sorry

lemma PROVE_CreateDynamicStateUniqueForSid [use_induction, reuse]:
  all-traces
  "∀ sid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i #j.
    ((CreateDynamicState( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
     (CreateDynamicState( sid, uidA2, idA2, uidB2, idB2, rk2 ) @ #j)) ⇒
    (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ sid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i #j.
  (CreateDynamicState( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
  (CreateDynamicState( sid, uidA2, idA2, uidB2, idB2, rk2 ) @ #j)
 ∧
  ¬(#i = #j)"
*/
by sorry

lemma PROVE_HonestStepAExcludesAttackerStartedA [use_induction,
                                                 reuse]:
  all-traces
  "∀ sid cid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i
     #j.
    ((HonestStepA( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
     (AttackerCreateDynamicStateA( cid, sid, uidA2, idA2, uidB2, idB2,
                                   rk2
      ) @ #j)) ⇒
    (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ sid cid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i
   #j.
  (HonestStepA( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
  (AttackerCreateDynamicStateA( cid, sid, uidA2, idA2, uidB2, idB2,
                                rk2
   ) @ #j)"
*/
by sorry

lemma PROVE_HonestStepBExcludesAttackerStartedB [use_induction,
                                                 reuse]:
  all-traces
  "∀ sid cid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i
     #j.
    ((HonestStepB( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
     (AttackerCreateDynamicStateB( cid, sid, uidA2, idA2, uidB2, idB2,
                                   rk2
      ) @ #j)) ⇒
    (⊥)"
/*
guarded formula characterizing all counter-examples:
"∃ sid cid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i
   #j.
  (HonestStepB( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
  (AttackerCreateDynamicStateB( cid, sid, uidA2, idA2, uidB2, idB2,
                                rk2
   ) @ #j)"
*/
by sorry

lemma PROVE_HonestStepAWellfounded [use_induction, reuse]:
  all-traces
  "∀ sid uidA idA uidB idB rk #i.
    (HonestStepA( sid, uidA, idA, uidB, idB, rk ) @ #i) ⇒
    (∃ rk2 #j.
      (#j < #i) ∧
      (CreateDynamicState( sid, uidA, idA, uidB, idB, rk2 ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ sid uidA idA uidB idB rk #i.
  (HonestStepA( sid, uidA, idA, uidB, idB, rk ) @ #i)
 ∧
  ∀ rk2 #j.
   (CreateDynamicState( sid, uidA, idA, uidB, idB, rk2 ) @ #j)
  ⇒
   ¬(#j < #i)"
*/
by sorry

lemma PROVE_HonestStepBWellfounded [use_induction, reuse]:
  all-traces
  "∀ sid uidA idA uidB idB rk #i.
    (HonestStepB( sid, uidA, idA, uidB, idB, rk ) @ #i) ⇒
    (∃ rk2 #j.
      (#j < #i) ∧
      (CreateDynamicState( sid, uidA, idA, uidB, idB, rk2 ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ sid uidA idA uidB idB rk #i.
  (HonestStepB( sid, uidA, idA, uidB, idB, rk ) @ #i)
 ∧
  ∀ rk2 #j.
   (CreateDynamicState( sid, uidA, idA, uidB, idB, rk2 ) @ #j)
  ⇒
   ¬(#j < #i)"
*/
by sorry

lemma PROVE_AttackerStepAWellfounded [use_induction, reuse]:
  all-traces
  "∀ sid cid uidA idA uidB idB rk1 #i.
    (AttackerStepA( cid, sid, uidA, idA, uidB, idB, rk1 ) @ #i) ⇒
    ((∃ rk2 #j.
       (CompromiseDynamicStateA( cid, sid, uidA, idA, uidB, idB, rk2
        ) @ #j) ∧
       (#j < #i)) ∨
     (∃ rk2 #j.
       (AttackerCreateDynamicStateA( cid, sid, uidA, idA, uidB, idB, rk2
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ sid cid uidA idA uidB idB rk1 #i.
  (AttackerStepA( cid, sid, uidA, idA, uidB, idB, rk1 ) @ #i)
 ∧
  (∀ rk2 #j.
    (CompromiseDynamicStateA( cid, sid, uidA, idA, uidB, idB, rk2
     ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ rk2 #j.
    (AttackerCreateDynamicStateA( cid, sid, uidA, idA, uidB, idB, rk2
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma PROVE_AttackerStepBWellfounded [use_induction, heuristic=i,
                                      reuse]:
  all-traces
  "∀ sid cid uidA idA uidB idB rk1 #i.
    (AttackerStepB( cid, sid, uidA, idA, uidB, idB, rk1 ) @ #i) ⇒
    ((∃ rk2 #j.
       (CompromiseDynamicStateB( cid, sid, uidA, idA, uidB, idB, rk2
        ) @ #j) ∧
       (#j < #i)) ∨
     (∃ rk2 #j.
       (AttackerCreateDynamicStateB( cid, sid, uidA, idA, uidB, idB, rk2
        ) @ #j) ∧
       (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ sid cid uidA idA uidB idB rk1 #i.
  (AttackerStepB( cid, sid, uidA, idA, uidB, idB, rk1 ) @ #i)
 ∧
  (∀ rk2 #j.
    (CompromiseDynamicStateB( cid, sid, uidA, idA, uidB, idB, rk2
     ) @ #j)
   ⇒
    ¬(#j < #i)) ∧
  (∀ rk2 #j.
    (AttackerCreateDynamicStateB( cid, sid, uidA, idA, uidB, idB, rk2
     ) @ #j)
   ⇒
    ¬(#j < #i))"
*/
by sorry

lemma PROVE_StepATotallyOrdered [heuristic=C, reuse]:
  all-traces
  "∀ sid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i #j.
    (((StepA( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
      (StepA( sid, uidA2, idA2, uidB2, idB2, rk2 ) @ #j)) ∧
     (¬(rk1 = rk2))) ⇒
    ((#i < #j) ∨ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ sid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i #j.
  (StepA( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
  (StepA( sid, uidA2, idA2, uidB2, idB2, rk2 ) @ #j)
 ∧
  (¬(rk1 = rk2)) ∧ (¬(#i < #j)) ∧ (¬(#j < #i))"
*/
by sorry

lemma PROVE_StepBTotallyOrdered [heuristic=C, reuse]:
  all-traces
  "∀ sid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i #j.
    (((StepB( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
      (StepB( sid, uidA2, idA2, uidB2, idB2, rk2 ) @ #j)) ∧
     (¬(rk1 = rk2))) ⇒
    ((#i < #j) ∨ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ sid uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk1 rk2 #i #j.
  (StepB( sid, uidA1, idA1, uidB1, idB1, rk1 ) @ #i) ∧
  (StepB( sid, uidA2, idA2, uidB2, idB2, rk2 ) @ #j)
 ∧
  (¬(rk1 = rk2)) ∧ (¬(#i < #j)) ∧ (¬(#j < #i))"
*/
by sorry

lemma PROVE_HonestStepABeforeDynamicStateLossA [use_induction,
                                                heuristic={State}, reuse]:
  all-traces
  "∀ sid uidA idA uidB idB rk1 rk2 #i #j.
    ((HonestStepA( sid, uidA, idA, uidB, idB, rk1 ) @ #i) ∧
     (DynamicStateLossA( sid, uidA, idA, uidB, idB, rk2 ) @ #j)) ⇒
    (#i < #j)"
/*
guarded formula characterizing all counter-examples:
"∃ sid uidA idA uidB idB rk1 rk2 #i #j.
  (HonestStepA( sid, uidA, idA, uidB, idB, rk1 ) @ #i) ∧
  (DynamicStateLossA( sid, uidA, idA, uidB, idB, rk2 ) @ #j)
 ∧
  ¬(#i < #j)"
*/
by sorry

lemma PROVE_HonestStepBBeforeDynamicStateLossB [use_induction,
                                                heuristic={State}, reuse]:
  all-traces
  "∀ sid uidA idA uidB idB rk1 rk2 #i #j.
    ((HonestStepB( sid, uidA, idA, uidB, idB, rk1 ) @ #i) ∧
     (DynamicStateLossB( sid, uidA, idA, uidB, idB, rk2 ) @ #j)) ⇒
    (#i < #j)"
/*
guarded formula characterizing all counter-examples:
"∃ sid uidA idA uidB idB rk1 rk2 #i #j.
  (HonestStepB( sid, uidA, idA, uidB, idB, rk1 ) @ #i) ∧
  (DynamicStateLossB( sid, uidA, idA, uidB, idB, rk2 ) @ #j)
 ∧
  ¬(#i < #j)"
*/
by sorry

lemma PROVE_HonestStepWithSameRKImpliesSameSid [heuristic={HonestStep},
                                                reuse]:
  all-traces
  "∀ sid1 sid2 uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk #i #j.
    ((HonestStep( sid1, uidA1, idA1, uidB1, idB1, rk ) @ #i) ∧
     (HonestStep( sid2, uidA2, idA2, uidB2, idB2, rk ) @ #j)) ⇒
    (sid1 = sid2)"
/*
guarded formula characterizing all counter-examples:
"∃ sid1 sid2 uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2 rk #i #j.
  (HonestStep( sid1, uidA1, idA1, uidB1, idB1, rk ) @ #i) ∧
  (HonestStep( sid2, uidA2, idA2, uidB2, idB2, rk ) @ #j)
 ∧
  ¬(sid1 = sid2)"
*/
by sorry

lemma PROVE_AttackerStepWithSameRKImpliesSameSid [heuristic={AttackerStep},
                                                  reuse]:
  all-traces
  "∀ cid1 cid2 sid1 sid2 uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2
     rk #i #j.
    ((AttackerStep( cid1, sid1, uidA1, idA1, uidB1, idB1, rk ) @ #i) ∧
     (AttackerStep( cid2, sid2, uidA2, idA2, uidB2, idB2, rk ) @ #j)) ⇒
    (sid1 = sid2)"
/*
guarded formula characterizing all counter-examples:
"∃ cid1 cid2 sid1 sid2 uidA1 uidA2 idA1 idA2 uidB1 uidB2 idB1 idB2
   rk #i #j.
  (AttackerStep( cid1, sid1, uidA1, idA1, uidB1, idB1, rk ) @ #i) ∧
  (AttackerStep( cid2, sid2, uidA2, idA2, uidB2, idB2, rk ) @ #j)
 ∧
  ¬(sid1 = sid2)"
*/
by sorry

lemma NOPROVE_SessionPCS_FullCompromise [reuse]:
  all-traces
  "∀ uidA idA uidB idB rk1 rk2 rk3 rk4 rk5 rk6 sid1 #i2 #i3 #i4 #i5.
    ((((((#i2 < #i3) ∧ (#i3 < #i4)) ∧
        (UpdateDynamicStateA_Sender( sid1, uidA, idA, uidB, idB, rk1, rk2
         ) @ #i2)) ∧
       (UpdateDynamicStateA_Receiver( sid1, uidA, idA, uidB, idB, rk3, rk4
        ) @ #i3)) ∧
      (ReceiveOrSend( sid1, uidA, idA, uidB, idB, rk5, rk6 ) @ #i4)) ∧
     (AttackerKnows( rk5 ) @ #i5)) ⇒
    ((((∃ rk7 #l.
         (#i2 < #l) ∧ (CompromiseA( uidA, idA, uidB, idB, rk7 ) @ #l)) ∨
       (∃ rk7 #l. CompromiseB( uidA, idA, uidB, idB, rk7 ) @ #l)) ∨
      (∃ #l. (#i2 < #l) ∧ (CompromiseDevice( uidA, idA ) @ #l))) ∨
     (∃ #l. CompromiseDevice( uidB, idB ) @ #l))"
/*
guarded formula characterizing all counter-examples:
"∃ uidA idA uidB idB rk1 rk2 rk3 rk4 rk5 rk6 sid1 #i2 #i3 #i4 #i5.
  (UpdateDynamicStateA_Sender( sid1, uidA, idA, uidB, idB, rk1, rk2
   ) @ #i2) ∧
  (UpdateDynamicStateA_Receiver( sid1, uidA, idA, uidB, idB, rk3, rk4
   ) @ #i3) ∧
  (ReceiveOrSend( sid1, uidA, idA, uidB, idB, rk5, rk6 ) @ #i4) ∧
  (AttackerKnows( rk5 ) @ #i5)
 ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (∀ rk7 #l.
    (CompromiseA( uidA, idA, uidB, idB, rk7 ) @ #l) ⇒ ¬(#i2 < #l)) ∧
  (∀ rk7 #l. (CompromiseB( uidA, idA, uidB, idB, rk7 ) @ #l) ⇒ ⊥) ∧
  (∀ #l. (CompromiseDevice( uidA, idA ) @ #l) ⇒ ¬(#i2 < #l)) ∧
  (∀ #l. (CompromiseDevice( uidB, idB ) @ #l) ⇒ ⊥)"
*/
by sorry

lemma PROVE_ConversationPCS_SessionCompromise [heuristic={PCS}]:
  all-traces
  "∀ uidA idA uidB idB rk1 rk2 rk3 rk4 rk5 rk6 sid1 sid2 sid3 #i2 #i3
     #i4 #i5.
    ((((((#i2 < #i3) ∧ (#i3 < #i4)) ∧
        (UpdateDynamicStateA_Sender( sid1, uidA, idA, uidB, idB, rk1, rk2
         ) @ #i2)) ∧
       (UpdateDynamicStateA_Receiver( sid2, uidA, idA, uidB, idB, rk3, rk4
        ) @ #i3)) ∧
      (ReceiveOrSend( sid3, uidA, idA, uidB, idB, rk5, rk6 ) @ #i4)) ∧
     (AttackerKnows( rk5 ) @ #i5)) ⇒
    ((((∃ rk7 #l.
         (#i2 < #l) ∧ (CompromiseA( uidA, idA, uidB, idB, rk7 ) @ #l)) ∨
       (∃ rk7 #l. CompromiseB( uidA, idA, uidB, idB, rk7 ) @ #l)) ∨
      (∃ #l. CompromiseDevice( uidA, idA ) @ #l)) ∨
     (∃ #l. CompromiseDevice( uidB, idB ) @ #l))"
/*
guarded formula characterizing all counter-examples:
"∃ uidA idA uidB idB rk1 rk2 rk3 rk4 rk5 rk6 sid1 sid2 sid3 #i2 #i3
   #i4 #i5.
  (UpdateDynamicStateA_Sender( sid1, uidA, idA, uidB, idB, rk1, rk2
   ) @ #i2) ∧
  (UpdateDynamicStateA_Receiver( sid2, uidA, idA, uidB, idB, rk3, rk4
   ) @ #i3) ∧
  (ReceiveOrSend( sid3, uidA, idA, uidB, idB, rk5, rk6 ) @ #i4) ∧
  (AttackerKnows( rk5 ) @ #i5)
 ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (∀ rk7 #l.
    (CompromiseA( uidA, idA, uidB, idB, rk7 ) @ #l) ⇒ ¬(#i2 < #l)) ∧
  (∀ rk7 #l. (CompromiseB( uidA, idA, uidB, idB, rk7 ) @ #l) ⇒ ⊥) ∧
  (∀ #l. (CompromiseDevice( uidA, idA ) @ #l) ⇒ ⊥) ∧
  (∀ #l. (CompromiseDevice( uidB, idB ) @ #l) ⇒ ⊥)"
*/
simplify
solve( ReceiveOrSend( sid3, ~uidA, ~idA, ~uidB, ~idB, rk5, rk6
       ) @ #i4 )
  case UpdateDynamicStateA_Receiver
  by sorry
next
  case UpdateDynamicStateA_Sender
  by sorry /* removed */
next
  case UpdateDynamicStateB_Receiver
  by sorry /* removed */
next
  case UpdateDynamicStateB_Sender
  solve( AttackerKnows( <old_keys.2, latest.2> ) @ #i5 )
    case AttackerUpdateDynamicStateA_Receiver
    solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
      case case_1
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i3)) )
          case case_1
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              solve( (∃ rk2 #j.
                       (CompromiseDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5)  ∥
                     (∃ rk2 #j.
                       (AttackerCreateDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                     ~uidB.1, ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5) )
                case case_1
                solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                             <old_keys.1, latest.1>,
                                             <<old_keys.1, latest.1>, ~new_rootkey.1>
                       ) ▶₁ #i3 )
                  case AttackerUpdateDynamicStateB_Sender
                  solve( (∃ rk2 #j.
                           (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     rk2
                            ) @ #j)
                          ∧
                           #j < #vr)  ∥
                         (∃ rk2 #j.
                           (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                         ~idB, rk2
                            ) @ #j)
                          ∧
                           #j < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case UpdateDynamicStateB_Sender
                  solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                               ~idB.1, <old_keys.2, latest.2>,
                                               <<old_keys.2, latest.2>, ~new_rootkey.2>
                         ) ▶₁ #i5 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, rk2
                              ) @ #j)
                            ∧
                             #j < #vr.1)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                           ~uidB.1, ~idB.1, rk2
                              ) @ #j)
                            ∧
                             #j < #vr.1) )
                      case case_1
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                             ) @ #j.2 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.2 )
                              case CreateDynamicState
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.2 )
                                case CreateDynamicState
                                solve( (∃ rk7 #l.
                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                        ∧
                                         #i2 < #l)  ∥
                                       (∃ rk7 #l.
                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                       (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                       (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                next
                                  case case_4
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                        case CompromiseDevice
                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.2 )
                                  case CreateDynamicState
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( (∃ rk7 #l.
                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                            ∧
                                             #i2 < #l)  ∥
                                           (∃ rk7 #l.
                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                           (∃ #l.
                                             (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                           (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      by contradiction /* from formulas */
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                           ) @ #j.1 )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                 ) @ #j.1 )
                            case CreateDynamicState
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                   ) @ #j.1 )
                              case CreateDynamicState
                              solve( (∃ rk7 #l.
                                       (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                      ∧
                                       #i2 < #l)  ∥
                                     (∃ rk7 #l.
                                       (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                     (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                     (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                  case CompromiseDevice
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr.3)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr.3) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, <old_keys.2, latest.2>,
                                                 <<old_keys.2, latest.2>, ~new_rootkey.2>
                           ) ▶₁ #i5 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                         ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.4)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.4) )
                        case case_1
                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.2 )
                                  case CreateDynamicState
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( (∃ rk7 #l.
                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                            ∧
                                             #i2 < #l)  ∥
                                           (∃ rk7 #l.
                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                           (∃ #l.
                                             (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                           (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      by contradiction /* from formulas */
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.1 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.1 )
                                case CreateDynamicState
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                       ) @ #j.1 )
                                  case CreateDynamicState
                                  solve( (∃ rk7 #l.
                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                          ∧
                                           #i2 < #l)  ∥
                                         (∃ rk7 #l.
                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                         (∃ #l.
                                           (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                         (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* from formulas */
                                  next
                                    case case_3
                                    by contradiction /* from formulas */
                                  next
                                    case case_4
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (∃ rk2 #j.
                       (CompromiseDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5)  ∥
                     (∃ rk2 #j.
                       (AttackerCreateDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                     ~uidB.1, ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5) )
                case case_1
                solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                  case case_1
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, <old_keys.2, latest.2>,
                                                 <<old_keys.2, latest.2>, ~new_rootkey.2>
                           ) ▶₁ #i5 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                         ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.1)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.1) )
                        case case_1
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.2 )
                                case CreateDynamicState
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i3 )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                          case CompromiseDevice
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i3 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                   ) @ #j.1 )
                              case CreateDynamicState
                              by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                        ) @ #i3 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, <old_keys.2, latest.2>,
                                                 <<old_keys.2, latest.2>, ~new_rootkey.2>
                           ) ▶₁ #i5 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                         ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.1)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.1) )
                        case case_1
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.3 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                     ) @ #j.2 )
                                case CreateDynamicState
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                                 ~idB.1, rk2.1
                                             ) @ #j.4 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.2 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                         ~uidB.1, ~idB.1, rk2
                                                     ) @ #j.4 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      simplify
                                                      solve( (<<old_keys, latest>, ~new_rootkey> =
                                                              <<old_keys.1, latest.1>, 
                                                               ~new_rootkey.1>)  ∥
                                                             (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                        case case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                            <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                           (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <<old_keys, latest>, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                          <<old_keys, latest>, ~new_rootkey>)  ∥
                                                         (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                                    case case_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          simplify
                                                          solve( (<
                                                                   <<old_keys, latest>, ~new_rootkey
                                                                   >, 
                                                                   ~new_rootkey.1> =
                                                                  <<old_keys.1, latest.1>, 
                                                                   ~new_rootkey.2>)  ∥
                                                                 (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                            case case_1
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.4>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                          <<old_keys, latest>, ~new_rootkey>)  ∥
                                                         (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                                    case case_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          simplify
                                                          solve( (<
                                                                   <<old_keys, latest>, ~new_rootkey
                                                                   >, 
                                                                   ~new_rootkey.1> =
                                                                  <<old_keys.1, latest.1>, 
                                                                   ~new_rootkey.2>)  ∥
                                                                 (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                            case case_1
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.4>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                          case CompromiseDevice
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.2
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CompromiseDevice
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                     ~uidB.1, ~idB.1, rk2
                                                 ) @ #j.1 )
                                            case AttackerCreateDynamicStateB
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.2 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i2 )
                                                case CompromiseDynamicStateA
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<old_keys, latest>, ~new_rootkey> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.1
                                                            >)  ∥
                                                           (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                          <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                         (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr < #vr.12)  ∥ (#vr.12 < #vr) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr < #vr.12)  ∥ (#vr.12 < #vr) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                             ) @ #j.2 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.1 )
                              case CreateDynamicState
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case AttackerCreateDynamicStateB
                                by contradiction /* from formulas */
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                               ~idB.1, rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2
                                                 ) @ #j.1 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2
                                                   ) @ #j.3 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i2 )
                                                case CompromiseDynamicStateA
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<old_keys, latest>, ~new_rootkey> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.1
                                                            >)  ∥
                                                           (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                          <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                         (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                  case CompromiseDevice
                  solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, <old_keys.2, latest.2>,
                                                   <<old_keys.2, latest.2>, ~new_rootkey.2>
                             ) ▶₁ #i5 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.4)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.4) )
                          case case_1
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i3 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                       ) @ #j.1 )
                                  case CreateDynamicState
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i3 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, <old_keys.2, latest.2>,
                                                   <<old_keys.2, latest.2>, ~new_rootkey.2>
                             ) ▶₁ #i5 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.4)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.4) )
                          case case_1
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.2
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CompromiseDevice
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2.1
                                                 ) @ #j.2 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2
                                                   ) @ #j )
                                              case AttackerCreateDynamicStateA
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i2 )
                                                case CompromiseDynamicStateA
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<old_keys, latest>, ~new_rootkey> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.1
                                                            >)  ∥
                                                           (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                          <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                         (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr.3 < #vr.12)  ∥ (#vr.12 < #vr.3) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr.3 < #vr.12)  ∥ (#vr.12 < #vr.3) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.1 )
                                  case CreateDynamicState
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CompromiseDevice
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2.1
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                     ~uidB.1, ~idB.1, rk2
                                                 ) @ #j )
                                            case AttackerCreateDynamicStateA
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i2 )
                                              case CompromiseDynamicStateA
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<old_keys, latest>, ~new_rootkey> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.1
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.2, latest.2
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                        <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                       (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                  case case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                      <<old_keys, latest>, ~new_rootkey>)  ∥
                                                     (#vr.3 < #vr.12)  ∥ (#vr.12 < #vr.3) )
                                                case case_1
                                                by contradiction /* cyclic */
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      simplify
                                                      solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                               ~new_rootkey.1> =
                                                              <<old_keys.1, latest.1>, 
                                                               ~new_rootkey.2>)  ∥
                                                             (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                        case case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.4>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.12)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.12) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                      <<old_keys, latest>, ~new_rootkey>)  ∥
                                                     (#vr.3 < #vr.12)  ∥ (#vr.12 < #vr.3) )
                                                case case_1
                                                by contradiction /* cyclic */
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      simplify
                                                      solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                               ~new_rootkey.1> =
                                                              <<old_keys.1, latest.1>, 
                                                               ~new_rootkey.2>)  ∥
                                                             (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                        case case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.4>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.12)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.12) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Sender
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (¬(#j.1 < #j.2))  ∥ (¬(#j.2 < #i3)) )
          case case_1
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                       ~uidB.1, ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5) )
                  case case_1
                  solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, <old_keys.2, latest.2>,
                                                   <<old_keys.2, latest.2>, ~new_rootkey.2>
                             ) ▶₁ #i5 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.1)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.1) )
                          case case_1
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CreateUserDevice
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i2 )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                            case CompromiseDevice
                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.1 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                        ) @ #i2 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, <old_keys.2, latest.2>,
                                                   <<old_keys.2, latest.2>, ~new_rootkey.2>
                             ) ▶₁ #i5 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.1)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.1) )
                          case case_1
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.3 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.3 )
                                        case CreateDynamicState
                                        solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                                   ~idB.1, rk2.1
                                               ) @ #j.4 )
                                          case AttackerCreateDynamicStateA
                                          by contradiction /* from formulas */
                                        next
                                          case AttackerCreateDynamicStateB
                                          by contradiction /* from formulas */
                                        next
                                          case CreateDynamicState
                                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                            case CreateUserDevice
                                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.3 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                           ~uidB.1, ~idB.1, rk2
                                                       ) @ #j.4 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i2 )
                                                    case CompromiseDynamicStateA
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.11 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.11 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.10 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.10 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( (∃ rk7 #l.
                                                                   (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk7
                                                                    ) @ #l)
                                                                  ∧
                                                                   #vr.12 < #l)  ∥
                                                                 (∃ rk7 #l.
                                                                   (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk7
                                                                    ) @ #l))  ∥
                                                                 (∃ #l.
                                                                   (CompromiseDevice( ~uidA, ~idA
                                                                    ) @ #l)
                                                                  ∧
                                                                   #vr.12 < #l)  ∥
                                                                 (∃ #l.
                                                                   (CompromiseDevice( ~uidB, ~idB
                                                                    ) @ #l)) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_3
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_4
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( (∃ rk7 #l.
                                                                   (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk7
                                                                    ) @ #l)
                                                                  ∧
                                                                   #vr.12 < #l)  ∥
                                                                 (∃ rk7 #l.
                                                                   (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk7
                                                                    ) @ #l))  ∥
                                                                 (∃ #l.
                                                                   (CompromiseDevice( ~uidA, ~idA
                                                                    ) @ #l)
                                                                  ∧
                                                                   #vr.12 < #l)  ∥
                                                                 (∃ #l.
                                                                   (CompromiseDevice( ~uidB, ~idB
                                                                    ) @ #l)) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_3
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_4
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                            case CompromiseDevice
                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.3 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2.2
                                                 ) @ #j.3 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2
                                                   ) @ #j.1 )
                                              case AttackerCreateDynamicStateB
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.3 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.12 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.12 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                by contradiction /* from formulas */
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.2 )
                                      case CreateDynamicState
                                      solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                                 ~idB.1, rk2.1
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.2 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                         ~uidB.1, ~idB.1, rk2
                                                     ) @ #j.3 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.11 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.11 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Sender
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.10 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.10 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.12 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.12 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.12 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.12 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                    case CompromiseDevice
                    solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.4)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.4) )
                            case case_1
                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                   ) @ #j.1 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.4)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.4) )
                            case case_1
                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.3 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2.2
                                                 ) @ #j.3 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2.1
                                                   ) @ #j.3 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                         ~uidB.1, ~idB.1, rk2
                                                     ) @ #j )
                                                case AttackerCreateDynamicStateA
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.12 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.12 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2.2
                                               ) @ #j.2 )
                                          case CreateDynamicState
                                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2.1
                                                 ) @ #j.2 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2
                                                   ) @ #j )
                                              case AttackerCreateDynamicStateA
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i2 )
                                                case CompromiseDynamicStateA
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys, latest>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.13 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.13 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.13 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.13 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                       ~uidB.1, ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5) )
                  case case_1
                  solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                    case case_1
                    solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1) )
                            case case_1
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                              case CompromiseDevice
                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i2 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1) )
                            case case_1
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                              case CompromiseDevice
                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i2 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (#j.3 = #i3)  ∥ (#i3 < #j.3) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1) )
                            case case_1
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.3 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                        case CreateUserDevice
                                        by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                      ~idB, rk2
                                                  ) @ #i3 )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                              case CompromiseDevice
                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.2
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB, rk2
                                                      ) @ #i3 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i3 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1) )
                            case case_1
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.4 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                         ) @ #j.3 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2.1
                                               ) @ #j.4 )
                                          case AttackerCreateDynamicStateA
                                          solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                            case CompromiseDevice
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case AttackerCreateDynamicStateB
                                          by contradiction /* from formulas */
                                        next
                                          case CreateDynamicState
                                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                            case CreateUserDevice
                                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.4 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.3, ~uidA.1, ~idA.1,
                                                                         ~uidB.1, ~idB.1, rk2.1
                                                     ) @ #j.5 )
                                                case AttackerCreateDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case AttackerCreateDynamicStateB
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.5 )
                                                  case CreateUserDevice
                                                  solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.5 )
                                                    case CreateUserDevice
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.3 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                                 ~idA.1, ~uidB.1,
                                                                                 ~idB.1, rk2
                                                             ) @ #j.5 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys, latest>
                                                               ) ▶₀ #i2 )
                                                          case CompromiseDynamicStateA
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.2>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.3
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys, latest>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys, latest
                                                                                   >, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.3 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <old_keys.1, 
                                                                                     latest.1>
                                                                     ) ▶₀ #i3 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* from formulas */
                                                              next
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.1, 
                                                                                        latest.1>, 
                                                                                       ~new_rootkey.3
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              next
                                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                solve( CreateDynamicState( ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                       ) @ #j.3 )
                                                                  case CreateDynamicState
                                                                  solve( DynamicStateB( ~sid.2,
                                                                                        ~uidA, ~idA,
                                                                                        ~uidB, ~idB,
                                                                                        <
                                                                                         <
                                                                                          old_keys.2, 
                                                                                          latest.2
                                                                                         >, 
                                                                                         ~new_rootkey.4
                                                                                        >
                                                                         ) ▶₀ #i4 )
                                                                    case CompromiseDynamicStateB
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateB( ~cid.2,
                                                                                             ~sid,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.11)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateB( ~cid.2,
                                                                                                 ~sid,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.11) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <old_keys.1, 
                                                                                     latest.1>
                                                                     ) ▶₀ #i3 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* from formulas */
                                                              next
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.1, 
                                                                                        latest.1>, 
                                                                                       ~new_rootkey.3
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              next
                                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                solve( CreateDynamicState( ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                       ) @ #j.3 )
                                                                  case CreateDynamicState
                                                                  solve( DynamicStateB( ~sid.2,
                                                                                        ~uidA, ~idA,
                                                                                        ~uidB, ~idB,
                                                                                        <
                                                                                         <
                                                                                          old_keys.2, 
                                                                                          latest.2
                                                                                         >, 
                                                                                         ~new_rootkey.4
                                                                                        >
                                                                         ) ▶₀ #i4 )
                                                                    case CompromiseDynamicStateB
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateB( ~cid.2,
                                                                                             ~sid,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.11)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateB( ~cid.2,
                                                                                                 ~sid,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.11) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                              case CompromiseDevice
                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.4 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2.2
                                                   ) @ #j.4 )
                                              case AttackerCreateDynamicStateA
                                              solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                                case CompromiseDevice
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case AttackerCreateDynamicStateB
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                                case CreateUserDevice
                                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.4 )
                                                  case CreateUserDevice
                                                  solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                             ~idA.1, ~uidB.1,
                                                                             ~idB.1, rk2
                                                         ) @ #j.1 )
                                                    case AttackerCreateDynamicStateB
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.3 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys, latest>
                                                             ) ▶₀ #i2 )
                                                        case CompromiseDynamicStateA
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.3 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys, latest>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.3 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.2,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.2,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.3 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CompromiseDevice
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid.3, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2.1
                                                   ) @ #j.4 )
                                              case AttackerCreateDynamicStateA
                                              by contradiction /* from formulas */
                                            next
                                              case AttackerCreateDynamicStateB
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                                case CreateUserDevice
                                                solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                                  case CreateUserDevice
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                               ~idA.1, ~uidB.1,
                                                                               ~idB.1, rk2
                                                           ) @ #j.4 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys, latest>
                                                             ) ▶₀ #i2 )
                                                        case CompromiseDynamicStateA
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys, latest>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Sender
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.1,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.1,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Sender
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.1,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.1,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                    case CompromiseDevice
                    solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                      case case_1
                      solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                        case case_1
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, <old_keys.2, latest.2>,
                                                       <<old_keys.2, latest.2>, ~new_rootkey.2>
                                 ) ▶₁ #i5 )
                            case AttackerUpdateDynamicStateB_Sender
                            solve( (∃ rk2 #j.
                                     (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4)  ∥
                                   (∃ rk2 #j.
                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                   ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4) )
                              case case_1
                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case UpdateDynamicStateB_Sender
                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.1 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, <old_keys.2, latest.2>,
                                                       <<old_keys.2, latest.2>, ~new_rootkey.2>
                                 ) ▶₁ #i5 )
                            case AttackerUpdateDynamicStateB_Sender
                            solve( (∃ rk2 #j.
                                     (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4)  ∥
                                   (∃ rk2 #j.
                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                   ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4) )
                              case case_1
                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case UpdateDynamicStateB_Sender
                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (#j.3 = #i3)  ∥ (#i3 < #j.3) )
                        case case_1
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, <old_keys.2, latest.2>,
                                                       <<old_keys.2, latest.2>, ~new_rootkey.2>
                                 ) ▶₁ #i5 )
                            case AttackerUpdateDynamicStateB_Sender
                            solve( (∃ rk2 #j.
                                     (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4)  ∥
                                   (∃ rk2 #j.
                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                   ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4) )
                              case case_1
                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.2
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB, rk2
                                                      ) @ #i3 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case UpdateDynamicStateB_Sender
                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.2
                                           ) @ #j.2 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                          case CreateUserDevice
                                          by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                        ~idB, rk2
                                                    ) @ #i3 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UpdateDynamicStateA( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, <old_keys.2, latest.2>,
                                                       <<old_keys.2, latest.2>, ~new_rootkey.2>
                                 ) ▶₁ #i5 )
                            case AttackerUpdateDynamicStateB_Sender
                            solve( (∃ rk2 #j.
                                     (CompromiseDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4)  ∥
                                   (∃ rk2 #j.
                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                   ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4) )
                              case case_1
                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.4 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2.2
                                                   ) @ #j.4 )
                                              case AttackerCreateDynamicStateA
                                              solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                                case CompromiseDevice
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case AttackerCreateDynamicStateB
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                                case CreateUserDevice
                                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.4 )
                                                  case CreateUserDevice
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2.1
                                                         ) @ #j.3 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                               ~idA.1, ~uidB.1,
                                                                               ~idB.1, rk2
                                                           ) @ #j )
                                                      case AttackerCreateDynamicStateA
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys, latest>
                                                             ) ▶₀ #i2 )
                                                        case CompromiseDynamicStateA
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.3 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys, latest>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.3 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.2,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.2,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case UpdateDynamicStateB_Sender
                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.3 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.2 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2.2
                                                 ) @ #j.3 )
                                            case AttackerCreateDynamicStateA
                                            solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                              case CompromiseDevice
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case AttackerCreateDynamicStateB
                                            by contradiction /* from formulas */
                                          next
                                            case CreateDynamicState
                                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                              case CreateUserDevice
                                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                                case CreateUserDevice
                                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                           ~uidB, ~idB, rk2.1
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                             ~idA.1, ~uidB.1,
                                                                             ~idB.1, rk2
                                                         ) @ #j )
                                                    case AttackerCreateDynamicStateA
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB, <old_keys, latest>
                                                           ) ▶₀ #i2 )
                                                      case CompromiseDynamicStateA
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys, latest>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <<old_keys, latest>, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.4>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.12)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateB( ~cid.1,
                                                                                             ~sid,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.12) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.4>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.12)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateB( ~cid.1,
                                                                                             ~sid,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.12) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case AttackerUpdateDynamicStateA_Sender
    solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
      case case_1
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i3)) )
          case case_1
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              solve( (∃ rk2 #j.
                       (CompromiseDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5)  ∥
                     (∃ rk2 #j.
                       (AttackerCreateDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                     ~uidB.1, ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5) )
                case case_1
                solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                             <old_keys.1, latest.1>,
                                             <<old_keys.1, latest.1>, ~new_rootkey.1>
                       ) ▶₁ #i3 )
                  case AttackerUpdateDynamicStateB_Sender
                  solve( (∃ rk2 #j.
                           (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     rk2
                            ) @ #j)
                          ∧
                           #j < #vr)  ∥
                         (∃ rk2 #j.
                           (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                         ~idB, rk2
                            ) @ #j)
                          ∧
                           #j < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case UpdateDynamicStateB_Sender
                  solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                         ) @ #j.1 )
                    case AttackerCreateDynamicStateA
                    by contradiction /* from formulas */
                  next
                    case AttackerCreateDynamicStateB
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  next
                    case CreateDynamicState
                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                      case CreateUserDevice
                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                               ) @ #j.1 )
                          case CreateDynamicState
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.1 )
                            case CreateDynamicState
                            solve( (∃ rk7 #l.
                                     (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                    ∧
                                     #i2 < #l)  ∥
                                   (∃ rk7 #l.
                                     (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                   (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                   (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            next
                              case case_3
                              by contradiction /* from formulas */
                            next
                              case case_4
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                  case CompromiseDevice
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr.3)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr.3) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                      case CreateUserDevice
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.1 )
                              case CreateDynamicState
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.1 )
                                case CreateDynamicState
                                solve( (∃ rk7 #l.
                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                        ∧
                                         #i2 < #l)  ∥
                                       (∃ rk7 #l.
                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                       (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                       (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                next
                                  case case_4
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (∃ rk2 #j.
                       (CompromiseDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5)  ∥
                     (∃ rk2 #j.
                       (AttackerCreateDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                     ~uidB.1, ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5) )
                case case_1
                solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                  case case_1
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                           ) @ #j.1 )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.1 )
                            case CreateDynamicState
                            by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                      ) @ #i3 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                           ) @ #j.2 )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                 ) @ #j.1 )
                            case CreateDynamicState
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case AttackerCreateDynamicStateB
                              by contradiction /* from formulas */
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                             ~idB.1, rk2.1
                                         ) @ #j.3 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                      case CompromiseDevice
                                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* cyclic */
                                              next
                                                case CreateDynamicState
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                simplify
                                                solve( (<<old_keys, latest>, ~new_rootkey> =
                                                        <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                       (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                  case case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.2, latest.2>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                      <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys, latest>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                    <<old_keys, latest>, ~new_rootkey>)  ∥
                                                   (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                              case case_1
                                              by contradiction /* cyclic */
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                             ~new_rootkey.1> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.2
                                                            >)  ∥
                                                           (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.4>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                    <<old_keys, latest>, ~new_rootkey>)  ∥
                                                   (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                              case case_1
                                              by contradiction /* cyclic */
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                             ~new_rootkey.1> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.2
                                                            >)  ∥
                                                           (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.4>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* cyclic */
                                              next
                                                case CreateDynamicState
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                simplify
                                                solve( (<<old_keys, latest>, ~new_rootkey> =
                                                        <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                       (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                  case case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.2, latest.2>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                      <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.9)  ∥ (#vr.9 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys, latest>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateB_Receiver
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateB_Receiver
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                    <<old_keys, latest>, ~new_rootkey>)  ∥
                                                   (#vr < #vr.10)  ∥ (#vr.10 < #vr) )
                                              case case_1
                                              by contradiction /* cyclic */
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                             ~new_rootkey.1> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.2
                                                            >)  ∥
                                                           (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.4>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                    <<old_keys, latest>, ~new_rootkey>)  ∥
                                                   (#vr < #vr.10)  ∥ (#vr.10 < #vr) )
                                              case case_1
                                              by contradiction /* cyclic */
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                             ~new_rootkey.1> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.2
                                                            >)  ∥
                                                           (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.4>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                  case CompromiseDevice
                  solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.1 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.1 )
                                case CreateDynamicState
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i3 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                     ) @ #j.1 )
                                case CreateDynamicState
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                                             ) @ #j.1 )
                                        case CreateDynamicState
                                        solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                              <old_keys, latest>
                                               ) ▶₀ #i2 )
                                          case CompromiseDynamicStateA
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2
                                                 ) @ #j.1 )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys.1, latest.1>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case CreateDynamicState
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              simplify
                                              solve( (<<old_keys, latest>, ~new_rootkey> =
                                                      <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.2, latest.2>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i3 )
                                            case CompromiseDynamicStateA
                                            by contradiction /* cyclic */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Sender
                                            solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                    <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                   (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                              case case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys, latest>, 
                                                                       ~new_rootkey.2>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys.1, latest.1>, 
                                                                       ~new_rootkey.3>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_3
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr.3 < #vr.11)  ∥ (#vr.11 < #vr.3) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.2, latest.2
                                                                             >, 
                                                                             ~new_rootkey.4>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr.3 < #vr.11)  ∥ (#vr.11 < #vr.3) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.2, latest.2
                                                                             >, 
                                                                             ~new_rootkey.4>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Sender
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (¬(#j.1 < #j.2))  ∥ (¬(#j.2 < #i3)) )
          case case_1
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                       ~uidB.1, ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5) )
                  case case_1
                  solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                      ) @ #i2 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.2 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              by contradiction /* from formulas */
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                               ~idB.1, rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                        case CompromiseDevice
                                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2
                                                 ) @ #j.2 )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i2 )
                                              case CompromiseDynamicStateA
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys, latest>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys, latest>, 
                                                                       ~new_rootkey.2>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.10 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.10 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.11)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.11) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.11)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.11) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Sender
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2
                                                 ) @ #j.2 )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i2 )
                                              case CompromiseDynamicStateA
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateB_Receiver
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.10 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.10 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys, latest>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys, latest>, 
                                                                       ~new_rootkey.2>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateB_Receiver
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.9 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.9 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.10)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.10) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.10)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.10) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Sender
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                    case CompromiseDevice
                    solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i2 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.2 )
                                        case CreateDynamicState
                                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.2 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys.1, latest.1>, 
                                                                       ~new_rootkey.2>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.11 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.11 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB,
                                                                    <<old_keys, latest>, 
                                                                     ~new_rootkey.2>
                                                     ) ▶₀ #i4 )
                                                case CompromiseDynamicStateB
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (∃ rk7 #l.
                                                       (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l)
                                                      ∧
                                                       #vr.10 < #l)  ∥
                                                     (∃ rk7 #l.
                                                       (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l))  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                      ∧
                                                       #vr.10 < #l)  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateA( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                       ~uidB.1, ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5) )
                  case case_1
                  solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                    case case_1
                    solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.1 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                        ) @ #i2 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                        ) @ #i2 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (#j.3 = #i3)  ∥ (#i3 < #j.3) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                by contradiction /* from formulas */
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i3 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.3 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                by contradiction /* from formulas */
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CompromiseDevice
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.3, ~uidA.1, ~idA.1,
                                                                     ~uidB.1, ~idB.1, rk2.1
                                                 ) @ #j.4 )
                                            case AttackerCreateDynamicStateA
                                            by contradiction /* from formulas */
                                          next
                                            case AttackerCreateDynamicStateB
                                            solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                              case CompromiseDevice
                                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                                case CreateUserDevice
                                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                           ~uidB, ~idB, rk2
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i2 )
                                                    case CompromiseDynamicStateA
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                              case CreateUserDevice
                                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                                case CreateUserDevice
                                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                           ~uidB, ~idB, rk2
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i2 )
                                                    case CompromiseDynamicStateA
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.10)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.1,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.10)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.1,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                    case CompromiseDevice
                    solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                      case case_1
                      solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                        case case_1
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.1 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (#j.3 = #i3)  ∥ (#i3 < #j.3) )
                        case case_1
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                      ~idB, rk2
                                                  ) @ #i3 )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2.1
                                               ) @ #j.3 )
                                          case AttackerCreateDynamicStateA
                                          solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                            case CompromiseDevice
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case AttackerCreateDynamicStateB
                                          by contradiction /* from formulas */
                                        next
                                          case CreateDynamicState
                                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                            case CreateUserDevice
                                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.2 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.4>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.4>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case AttackerUpdateDynamicStateB_Receiver
    solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
      case case_1
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i3)) )
          case case_1
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              solve( (∃ rk2 #j.
                       (CompromiseDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5)  ∥
                     (∃ rk2 #j.
                       (AttackerCreateDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                     ~uidB.1, ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5) )
                case case_1
                solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                             <old_keys.1, latest.1>,
                                             <<old_keys.1, latest.1>, ~new_rootkey.1>
                       ) ▶₁ #i3 )
                  case AttackerUpdateDynamicStateB_Sender
                  solve( (∃ rk2 #j.
                           (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     rk2
                            ) @ #j)
                          ∧
                           #j < #vr)  ∥
                         (∃ rk2 #j.
                           (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                         ~idB, rk2
                            ) @ #j)
                          ∧
                           #j < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case UpdateDynamicStateB_Sender
                  solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                               ~idB.1, <old_keys.2, latest.2>,
                                               <<old_keys.2, latest.2>, ~new_rootkey.2>
                         ) ▶₁ #i5 )
                    case AttackerUpdateDynamicStateA_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, rk2
                              ) @ #j)
                            ∧
                             #j < #vr.1)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                           ~uidB.1, ~idB.1, rk2
                              ) @ #j)
                            ∧
                             #j < #vr.1) )
                      case case_1
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                             ) @ #j.2 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.2 )
                              case CreateDynamicState
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.2 )
                                case CreateDynamicState
                                solve( (∃ rk7 #l.
                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                        ∧
                                         #i2 < #l)  ∥
                                       (∃ rk7 #l.
                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                       (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                       (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                next
                                  case case_4
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                        case CompromiseDevice
                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.2 )
                                  case CreateDynamicState
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( (∃ rk7 #l.
                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                            ∧
                                             #i2 < #l)  ∥
                                           (∃ rk7 #l.
                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                           (∃ #l.
                                             (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                           (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      by contradiction /* from formulas */
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case UpdateDynamicStateA_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                           ) @ #j.1 )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                 ) @ #j.1 )
                            case CreateDynamicState
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                   ) @ #j.1 )
                              case CreateDynamicState
                              solve( (∃ rk7 #l.
                                       (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                      ∧
                                       #i2 < #l)  ∥
                                     (∃ rk7 #l.
                                       (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                     (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                     (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              next
                                case case_3
                                by contradiction /* from formulas */
                              next
                                case case_4
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                  case CompromiseDevice
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr.3)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr.3) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, <old_keys.2, latest.2>,
                                                 <<old_keys.2, latest.2>, ~new_rootkey.2>
                           ) ▶₁ #i5 )
                      case AttackerUpdateDynamicStateA_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                         ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.4)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.4) )
                        case case_1
                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.2 )
                                  case CreateDynamicState
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( (∃ rk7 #l.
                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                            ∧
                                             #i2 < #l)  ∥
                                           (∃ rk7 #l.
                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                           (∃ #l.
                                             (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                           (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                      case case_1
                                      by contradiction /* from formulas */
                                    next
                                      case case_2
                                      by contradiction /* from formulas */
                                    next
                                      case case_3
                                      by contradiction /* from formulas */
                                    next
                                      case case_4
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case UpdateDynamicStateA_Sender
                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.1 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.1 )
                                case CreateDynamicState
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                       ) @ #j.1 )
                                  case CreateDynamicState
                                  solve( (∃ rk7 #l.
                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                          ∧
                                           #i2 < #l)  ∥
                                         (∃ rk7 #l.
                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                         (∃ #l.
                                           (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                         (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    by contradiction /* from formulas */
                                  next
                                    case case_3
                                    by contradiction /* from formulas */
                                  next
                                    case case_4
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (∃ rk2 #j.
                       (CompromiseDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5)  ∥
                     (∃ rk2 #j.
                       (AttackerCreateDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                     ~uidB.1, ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5) )
                case case_1
                solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                  case case_1
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, <old_keys.2, latest.2>,
                                                 <<old_keys.2, latest.2>, ~new_rootkey.2>
                           ) ▶₁ #i5 )
                      case AttackerUpdateDynamicStateA_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                         ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.1)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.1) )
                        case case_1
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.2 )
                                case CreateDynamicState
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i3 )
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                          case CompromiseDevice
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i3 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case UpdateDynamicStateA_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                   ) @ #j.1 )
                              case CreateDynamicState
                              by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                        ) @ #i3 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, <old_keys.2, latest.2>,
                                                 <<old_keys.2, latest.2>, ~new_rootkey.2>
                           ) ▶₁ #i5 )
                      case AttackerUpdateDynamicStateA_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                         ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.1)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.1) )
                        case case_1
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.3 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                     ) @ #j.2 )
                                case CreateDynamicState
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                                 ~idB.1, rk2.1
                                             ) @ #j.4 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.2 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                         ~uidB.1, ~idB.1, rk2
                                                     ) @ #j.4 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      simplify
                                                      solve( (<<old_keys, latest>, ~new_rootkey> =
                                                              <<old_keys.1, latest.1>, 
                                                               ~new_rootkey.1>)  ∥
                                                             (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                        case case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                            <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                           (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <<old_keys, latest>, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                          <<old_keys, latest>, ~new_rootkey>)  ∥
                                                         (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                                    case case_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          simplify
                                                          solve( (<
                                                                   <<old_keys, latest>, ~new_rootkey
                                                                   >, 
                                                                   ~new_rootkey.1> =
                                                                  <<old_keys.1, latest.1>, 
                                                                   ~new_rootkey.2>)  ∥
                                                                 (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                            case case_1
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.4>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                          <<old_keys, latest>, ~new_rootkey>)  ∥
                                                         (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                                    case case_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          simplify
                                                          solve( (<
                                                                   <<old_keys, latest>, ~new_rootkey
                                                                   >, 
                                                                   ~new_rootkey.1> =
                                                                  <<old_keys.1, latest.1>, 
                                                                   ~new_rootkey.2>)  ∥
                                                                 (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                            case case_1
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_2
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.4>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          next
                                                            case case_3
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                          case CompromiseDevice
                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.2
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CompromiseDevice
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                     ~uidB.1, ~idB.1, rk2
                                                 ) @ #j.1 )
                                            case AttackerCreateDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.2 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i2 )
                                                case CompromiseDynamicStateA
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<old_keys, latest>, ~new_rootkey> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.1
                                                            >)  ∥
                                                           (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                          <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                         (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr < #vr.12)  ∥ (#vr.12 < #vr) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr < #vr.12)  ∥ (#vr.12 < #vr) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case UpdateDynamicStateA_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                             ) @ #j.2 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.1 )
                              case CreateDynamicState
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case AttackerCreateDynamicStateB
                                by contradiction /* from formulas */
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                               ~idB.1, rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2
                                                 ) @ #j.1 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2
                                                   ) @ #j.3 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i2 )
                                                case CompromiseDynamicStateA
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<old_keys, latest>, ~new_rootkey> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.1
                                                            >)  ∥
                                                           (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                          <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                         (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                  case CompromiseDevice
                  solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, <old_keys.2, latest.2>,
                                                   <<old_keys.2, latest.2>, ~new_rootkey.2>
                             ) ▶₁ #i5 )
                        case AttackerUpdateDynamicStateA_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.4)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.4) )
                          case case_1
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i3 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case UpdateDynamicStateA_Sender
                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                       ) @ #j.1 )
                                  case CreateDynamicState
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i3 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, <old_keys.2, latest.2>,
                                                   <<old_keys.2, latest.2>, ~new_rootkey.2>
                             ) ▶₁ #i5 )
                        case AttackerUpdateDynamicStateA_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.4)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.4) )
                          case case_1
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.2
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CompromiseDevice
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2.1
                                                 ) @ #j.2 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2
                                                   ) @ #j )
                                              case AttackerCreateDynamicStateB
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i2 )
                                                case CompromiseDynamicStateA
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<old_keys, latest>, ~new_rootkey> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.1
                                                            >)  ∥
                                                           (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                          <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                         (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr.3 < #vr.12)  ∥ (#vr.12 < #vr.3) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                        <<old_keys, latest>, ~new_rootkey>)  ∥
                                                       (#vr.3 < #vr.12)  ∥ (#vr.12 < #vr.3) )
                                                  case case_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        simplify
                                                        solve( (<
                                                                 <<old_keys, latest>, ~new_rootkey
                                                                 >, 
                                                                 ~new_rootkey.1> =
                                                                <<old_keys.1, latest.1>, 
                                                                 ~new_rootkey.2>)  ∥
                                                               (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                          case case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        next
                                                          case case_3
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case UpdateDynamicStateA_Sender
                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.1 )
                                  case CreateDynamicState
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.2
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CompromiseDevice
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2.1
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                     ~uidB.1, ~idB.1, rk2
                                                 ) @ #j )
                                            case AttackerCreateDynamicStateB
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i2 )
                                              case CompromiseDynamicStateA
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<old_keys, latest>, ~new_rootkey> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.1
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.2, latest.2
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                        <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                       (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                  case case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                      <<old_keys, latest>, ~new_rootkey>)  ∥
                                                     (#vr.3 < #vr.12)  ∥ (#vr.12 < #vr.3) )
                                                case case_1
                                                by contradiction /* cyclic */
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      simplify
                                                      solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                               ~new_rootkey.1> =
                                                              <<old_keys.1, latest.1>, 
                                                               ~new_rootkey.2>)  ∥
                                                             (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                        case case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.4>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.12)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.12) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                      <<old_keys, latest>, ~new_rootkey>)  ∥
                                                     (#vr.3 < #vr.12)  ∥ (#vr.12 < #vr.3) )
                                                case case_1
                                                by contradiction /* cyclic */
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* cyclic */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      simplify
                                                      solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                               ~new_rootkey.1> =
                                                              <<old_keys.1, latest.1>, 
                                                               ~new_rootkey.2>)  ∥
                                                             (#i2 < #vr.13)  ∥ (#vr.13 < #i2) )
                                                        case case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_2
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.4>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      next
                                                        case case_3
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.12)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.12) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Sender
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (¬(#j.1 < #j.2))  ∥ (¬(#j.2 < #i3)) )
          case case_1
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                       ~uidB.1, ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5) )
                  case case_1
                  solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, <old_keys.2, latest.2>,
                                                   <<old_keys.2, latest.2>, ~new_rootkey.2>
                             ) ▶₁ #i5 )
                        case AttackerUpdateDynamicStateA_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.1)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.1) )
                          case case_1
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CreateUserDevice
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i2 )
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                            case CompromiseDevice
                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case UpdateDynamicStateA_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.1 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                        ) @ #i2 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, <old_keys.2, latest.2>,
                                                   <<old_keys.2, latest.2>, ~new_rootkey.2>
                             ) ▶₁ #i5 )
                        case AttackerUpdateDynamicStateA_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.1)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.1) )
                          case case_1
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.3 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.3 )
                                        case CreateDynamicState
                                        solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                                   ~idB.1, rk2.1
                                               ) @ #j.4 )
                                          case AttackerCreateDynamicStateA
                                          by contradiction /* from formulas */
                                        next
                                          case AttackerCreateDynamicStateB
                                          by contradiction /* from formulas */
                                        next
                                          case CreateDynamicState
                                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                            case CreateUserDevice
                                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.3 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                           ~uidB.1, ~idB.1, rk2
                                                       ) @ #j.4 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i2 )
                                                    case CompromiseDynamicStateA
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.11 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.11 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.10 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.10 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( (∃ rk7 #l.
                                                                   (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk7
                                                                    ) @ #l)
                                                                  ∧
                                                                   #vr.12 < #l)  ∥
                                                                 (∃ rk7 #l.
                                                                   (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk7
                                                                    ) @ #l))  ∥
                                                                 (∃ #l.
                                                                   (CompromiseDevice( ~uidA, ~idA
                                                                    ) @ #l)
                                                                  ∧
                                                                   #vr.12 < #l)  ∥
                                                                 (∃ #l.
                                                                   (CompromiseDevice( ~uidB, ~idB
                                                                    ) @ #l)) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_3
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_4
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( (∃ rk7 #l.
                                                                   (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk7
                                                                    ) @ #l)
                                                                  ∧
                                                                   #vr.12 < #l)  ∥
                                                                 (∃ rk7 #l.
                                                                   (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk7
                                                                    ) @ #l))  ∥
                                                                 (∃ #l.
                                                                   (CompromiseDevice( ~uidA, ~idA
                                                                    ) @ #l)
                                                                  ∧
                                                                   #vr.12 < #l)  ∥
                                                                 (∃ #l.
                                                                   (CompromiseDevice( ~uidB, ~idB
                                                                    ) @ #l)) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_3
                                                            by contradiction /* from formulas */
                                                          next
                                                            case case_4
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                            case CompromiseDevice
                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.3 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2.2
                                                 ) @ #j.3 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2
                                                   ) @ #j.1 )
                                              case AttackerCreateDynamicStateA
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.3 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.12 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.12 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case UpdateDynamicStateA_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                by contradiction /* from formulas */
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.2 )
                                      case CreateDynamicState
                                      solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                                 ~idB.1, rk2.1
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.2 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                         ~uidB.1, ~idB.1, rk2
                                                     ) @ #j.3 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.11 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.11 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.10 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.10 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.12 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.12 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.12 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.12 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                    case CompromiseDevice
                    solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateA_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.4)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.4) )
                            case case_1
                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateA_Sender
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                   ) @ #j.1 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateA_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.4)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.4) )
                            case case_1
                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.3 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2.2
                                                 ) @ #j.3 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2.1
                                                   ) @ #j.3 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                         ~uidB.1, ~idB.1, rk2
                                                     ) @ #j )
                                                case AttackerCreateDynamicStateB
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.12 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.12 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( (∃ rk7 #l.
                                                                 (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ rk7 #l.
                                                                 (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                               ~idB, rk7
                                                                  ) @ #l))  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidA, ~idA
                                                                  ) @ #l)
                                                                ∧
                                                                 #vr.13 < #l)  ∥
                                                               (∃ #l.
                                                                 (CompromiseDevice( ~uidB, ~idB
                                                                  ) @ #l)) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_3
                                                          by contradiction /* from formulas */
                                                        next
                                                          case case_4
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateA_Sender
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2.2
                                               ) @ #j.2 )
                                          case CreateDynamicState
                                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2.1
                                                 ) @ #j.2 )
                                            case CreateDynamicState
                                            solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2
                                                   ) @ #j )
                                              case AttackerCreateDynamicStateB
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys, latest>
                                                     ) ▶₀ #i2 )
                                                case CompromiseDynamicStateA
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys, latest>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.13 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.13 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( (∃ rk7 #l.
                                                               (CompromiseA( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l)
                                                              ∧
                                                               #vr.13 < #l)  ∥
                                                             (∃ rk7 #l.
                                                               (CompromiseB( ~uidA, ~idA, ~uidB,
                                                                             ~idB, rk7
                                                                ) @ #l))  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidA, ~idA
                                                                ) @ #l)
                                                              ∧
                                                               #vr.13 < #l)  ∥
                                                             (∃ #l.
                                                               (CompromiseDevice( ~uidB, ~idB
                                                                ) @ #l)) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_3
                                                        by contradiction /* from formulas */
                                                      next
                                                        case case_4
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.12) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                       ~uidB.1, ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5) )
                  case case_1
                  solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                    case case_1
                    solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateA_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1) )
                            case case_1
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                              case CompromiseDevice
                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateA_Sender
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i2 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateA_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1) )
                            case case_1
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                              case CompromiseDevice
                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateA_Sender
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i2 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (#j.3 = #i3)  ∥ (#i3 < #j.3) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateA_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1) )
                            case case_1
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.3 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                        case CreateUserDevice
                                        by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                      ~idB, rk2
                                                  ) @ #i3 )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                              case CompromiseDevice
                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.2
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB, rk2
                                                      ) @ #i3 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateA_Sender
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i3 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                     ~idB.1, <old_keys.2, latest.2>,
                                                     <<old_keys.2, latest.2>, ~new_rootkey.2>
                               ) ▶₁ #i5 )
                          case AttackerUpdateDynamicStateA_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                             ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                 ~uidB.1, ~idB.1, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.1) )
                            case case_1
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.4 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                         ) @ #j.3 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2.1
                                               ) @ #j.4 )
                                          case AttackerCreateDynamicStateA
                                          solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                            case CompromiseDevice
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case AttackerCreateDynamicStateB
                                          by contradiction /* from formulas */
                                        next
                                          case CreateDynamicState
                                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                            case CreateUserDevice
                                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.4 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.3, ~uidA.1, ~idA.1,
                                                                         ~uidB.1, ~idB.1, rk2.1
                                                     ) @ #j.5 )
                                                case AttackerCreateDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case AttackerCreateDynamicStateB
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.5 )
                                                  case CreateUserDevice
                                                  solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.5 )
                                                    case CreateUserDevice
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.3 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                                 ~idA.1, ~uidB.1,
                                                                                 ~idB.1, rk2
                                                             ) @ #j.5 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys, latest>
                                                               ) ▶₀ #i2 )
                                                          case CompromiseDynamicStateA
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.2>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.3
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys, latest>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys, latest
                                                                                   >, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.3 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <old_keys.1, 
                                                                                     latest.1>
                                                                     ) ▶₀ #i3 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* from formulas */
                                                              next
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.1, 
                                                                                        latest.1>, 
                                                                                       ~new_rootkey.3
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              next
                                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                solve( CreateDynamicState( ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                       ) @ #j.3 )
                                                                  case CreateDynamicState
                                                                  solve( DynamicStateB( ~sid.2,
                                                                                        ~uidA, ~idA,
                                                                                        ~uidB, ~idB,
                                                                                        <
                                                                                         <
                                                                                          old_keys.2, 
                                                                                          latest.2
                                                                                         >, 
                                                                                         ~new_rootkey.4
                                                                                        >
                                                                         ) ▶₀ #i4 )
                                                                    case CompromiseDynamicStateB
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case UpdateDynamicStateB_Receiver
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case UpdateDynamicStateB_Receiver_OOO
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateB( ~cid.2,
                                                                                             ~sid,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.11)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateB( ~cid.2,
                                                                                                 ~sid,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.11) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid, ~uidA,
                                                                                       ~idA, ~uidB,
                                                                                       ~idB, rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <old_keys.1, 
                                                                                     latest.1>
                                                                     ) ▶₀ #i3 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* from formulas */
                                                              next
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.1, 
                                                                                        latest.1>, 
                                                                                       ~new_rootkey.3
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              next
                                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_case_1
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Receiver_case_2
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                solve( CreateDynamicState( ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                       ) @ #j.3 )
                                                                  case CreateDynamicState
                                                                  solve( DynamicStateB( ~sid.2,
                                                                                        ~uidA, ~idA,
                                                                                        ~uidB, ~idB,
                                                                                        <
                                                                                         <
                                                                                          old_keys.2, 
                                                                                          latest.2
                                                                                         >, 
                                                                                         ~new_rootkey.4
                                                                                        >
                                                                         ) ▶₀ #i4 )
                                                                    case CompromiseDynamicStateB
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case UpdateDynamicStateB_Receiver
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  next
                                                                    case UpdateDynamicStateB_Receiver_OOO
                                                                    by contradiction
                                                                       /* from formulas */
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateB( ~cid.2,
                                                                                             ~sid,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.11)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateB( ~cid.2,
                                                                                                 ~sid,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.11) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.1 )
                              case CompromiseDevice
                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.4 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2.2
                                                   ) @ #j.4 )
                                              case AttackerCreateDynamicStateA
                                              solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                                case CompromiseDevice
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case AttackerCreateDynamicStateB
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                                case CreateUserDevice
                                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.4 )
                                                  case CreateUserDevice
                                                  solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                             ~idA.1, ~uidB.1,
                                                                             ~idB.1, rk2
                                                         ) @ #j.1 )
                                                    case AttackerCreateDynamicStateA
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.3 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys, latest>
                                                             ) ▶₀ #i2 )
                                                        case CompromiseDynamicStateA
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.3 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys, latest>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.3 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.2,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.2,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case UpdateDynamicStateA_Sender
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.3 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CompromiseDevice
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid.3, ~uidA.1, ~idA.1,
                                                                       ~uidB.1, ~idB.1, rk2.1
                                                   ) @ #j.4 )
                                              case AttackerCreateDynamicStateA
                                              by contradiction /* from formulas */
                                            next
                                              case AttackerCreateDynamicStateB
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                                case CreateUserDevice
                                                solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                                  case CreateUserDevice
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.2 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                               ~idA.1, ~uidB.1,
                                                                               ~idB.1, rk2
                                                           ) @ #j.4 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys, latest>
                                                             ) ▶₀ #i2 )
                                                        case CompromiseDynamicStateA
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys, latest>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.1,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.1,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.1,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.1,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                    case CompromiseDevice
                    solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                      case case_1
                      solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                        case case_1
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, <old_keys.2, latest.2>,
                                                       <<old_keys.2, latest.2>, ~new_rootkey.2>
                                 ) ▶₁ #i5 )
                            case AttackerUpdateDynamicStateA_Sender
                            solve( (∃ rk2 #j.
                                     (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4)  ∥
                                   (∃ rk2 #j.
                                     (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                   ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4) )
                              case case_1
                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case UpdateDynamicStateA_Sender
                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.1 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, <old_keys.2, latest.2>,
                                                       <<old_keys.2, latest.2>, ~new_rootkey.2>
                                 ) ▶₁ #i5 )
                            case AttackerUpdateDynamicStateA_Sender
                            solve( (∃ rk2 #j.
                                     (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4)  ∥
                                   (∃ rk2 #j.
                                     (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                   ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4) )
                              case case_1
                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, rk2
                                                ) @ #i2 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case UpdateDynamicStateA_Sender
                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i2 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (#j.3 = #i3)  ∥ (#i3 < #j.3) )
                        case case_1
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, <old_keys.2, latest.2>,
                                                       <<old_keys.2, latest.2>, ~new_rootkey.2>
                                 ) ▶₁ #i5 )
                            case AttackerUpdateDynamicStateA_Sender
                            solve( (∃ rk2 #j.
                                     (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4)  ∥
                                   (∃ rk2 #j.
                                     (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                   ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4) )
                              case case_1
                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.3 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.2
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB, rk2
                                                      ) @ #i3 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case UpdateDynamicStateA_Sender
                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.2
                                           ) @ #j.2 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                          case CreateUserDevice
                                          by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                        ~idB, rk2
                                                    ) @ #i3 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UpdateDynamicStateB( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                       ~idB.1, <old_keys.2, latest.2>,
                                                       <<old_keys.2, latest.2>, ~new_rootkey.2>
                                 ) ▶₁ #i5 )
                            case AttackerUpdateDynamicStateA_Sender
                            solve( (∃ rk2 #j.
                                     (CompromiseDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                               ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4)  ∥
                                   (∃ rk2 #j.
                                     (AttackerCreateDynamicStateA( ~cid.1, ~sid.3, ~uidA.1, ~idA.1,
                                                                   ~uidB.1, ~idB.1, rk2
                                      ) @ #j)
                                    ∧
                                     #j < #vr.4) )
                              case case_1
                              solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                       ) @ #j.4 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.3 )
                                        case AttackerCreateDynamicStateA
                                        by contradiction /* from formulas */
                                      next
                                        case AttackerCreateDynamicStateB
                                        by contradiction /* from formulas */
                                      next
                                        case CreateDynamicState
                                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                          case CreateUserDevice
                                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                            case CreateUserDevice
                                            solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2.2
                                                   ) @ #j.4 )
                                              case AttackerCreateDynamicStateA
                                              solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                                case CompromiseDevice
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case AttackerCreateDynamicStateB
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.4 )
                                                case CreateUserDevice
                                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.4 )
                                                  case CreateUserDevice
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2.1
                                                         ) @ #j.3 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                               ~idA.1, ~uidB.1,
                                                                               ~idB.1, rk2
                                                           ) @ #j )
                                                      case AttackerCreateDynamicStateB
                                                      solve( DynamicStateA( ~sid, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys, latest>
                                                             ) ▶₀ #i2 )
                                                        case CompromiseDynamicStateA
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.3 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys, latest>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.3 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.2,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.1, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <old_keys.1, 
                                                                                   latest.1>
                                                                   ) ▶₀ #i3 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* from formulas */
                                                            next
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_1
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Receiver_case_2
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              solve( CreateDynamicState( ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.3 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                      ~idA, ~uidB,
                                                                                      ~idB,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i4 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateB( ~cid.2,
                                                                                               ~sid,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case UpdateDynamicStateA_Sender
                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.4
                                     ) @ #j.3 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CompromiseDevice
                                  by contradiction /* from formulas */
                                qed
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.2 )
                                      case AttackerCreateDynamicStateA
                                      by contradiction /* from formulas */
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2.2
                                                 ) @ #j.3 )
                                            case AttackerCreateDynamicStateA
                                            solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                              case CompromiseDevice
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case AttackerCreateDynamicStateB
                                            by contradiction /* from formulas */
                                          next
                                            case CreateDynamicState
                                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                              case CreateUserDevice
                                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                                case CreateUserDevice
                                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                           ~uidB, ~idB, rk2.1
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( CreateDynamicState( ~sid.3, ~uidA.1,
                                                                             ~idA.1, ~uidB.1,
                                                                             ~idB.1, rk2
                                                         ) @ #j )
                                                    case AttackerCreateDynamicStateB
                                                    solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                          ~idB, <old_keys, latest>
                                                           ) ▶₀ #i2 )
                                                      case CompromiseDynamicStateA
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys, latest>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <<old_keys, latest>, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.4>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.12)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateB( ~cid.1,
                                                                                             ~sid,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.12) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.1, 
                                                                                 latest.1>
                                                                 ) ▶₀ #i3 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_1
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Receiver_case_2
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            solve( CreateDynamicState( ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                    ~idA, ~uidB,
                                                                                    ~idB,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.4>
                                                                     ) ▶₀ #i4 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.12)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateB( ~cid.1,
                                                                                             ~sid,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.12) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case AttackerUpdateDynamicStateB_Sender
    solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
      case case_1
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i3)) )
          case case_1
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              solve( (∃ rk2 #j.
                       (CompromiseDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5)  ∥
                     (∃ rk2 #j.
                       (AttackerCreateDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                     ~uidB.1, ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5) )
                case case_1
                solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                             <old_keys.1, latest.1>,
                                             <<old_keys.1, latest.1>, ~new_rootkey.1>
                       ) ▶₁ #i3 )
                  case AttackerUpdateDynamicStateB_Sender
                  solve( (∃ rk2 #j.
                           (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     rk2
                            ) @ #j)
                          ∧
                           #j < #vr)  ∥
                         (∃ rk2 #j.
                           (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                         ~idB, rk2
                            ) @ #j)
                          ∧
                           #j < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case UpdateDynamicStateB_Sender
                  solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                         ) @ #j.1 )
                    case AttackerCreateDynamicStateA
                    by contradiction /* from formulas */
                  next
                    case AttackerCreateDynamicStateB
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  next
                    case CreateDynamicState
                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                      case CreateUserDevice
                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                               ) @ #j.1 )
                          case CreateDynamicState
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.1 )
                            case CreateDynamicState
                            solve( (∃ rk7 #l.
                                     (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                    ∧
                                     #i2 < #l)  ∥
                                   (∃ rk7 #l.
                                     (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                   (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                   (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            next
                              case case_3
                              by contradiction /* from formulas */
                            next
                              case case_4
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                  case CompromiseDevice
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr.3)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr.3) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                      case CreateUserDevice
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.1 )
                              case CreateDynamicState
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.1 )
                                case CreateDynamicState
                                solve( (∃ rk7 #l.
                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                        ∧
                                         #i2 < #l)  ∥
                                       (∃ rk7 #l.
                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                       (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                       (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                  case case_1
                                  by contradiction /* from formulas */
                                next
                                  case case_2
                                  by contradiction /* from formulas */
                                next
                                  case case_3
                                  by contradiction /* from formulas */
                                next
                                  case case_4
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (∃ rk2 #j.
                       (CompromiseDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                 ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5)  ∥
                     (∃ rk2 #j.
                       (AttackerCreateDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                     ~uidB.1, ~idB.1, rk2
                        ) @ #j)
                      ∧
                       #j < #i5) )
                case case_1
                solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                  case case_1
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                           ) @ #j.1 )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.1 )
                            case CreateDynamicState
                            by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                      ) @ #i3 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                           ) @ #j.2 )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                 ) @ #j.1 )
                            case CreateDynamicState
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case AttackerCreateDynamicStateB
                              by contradiction /* from formulas */
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                             ~idB.1, rk2.1
                                         ) @ #j.3 )
                                    case AttackerCreateDynamicStateA
                                    solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                      case CompromiseDevice
                                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* cyclic */
                                              next
                                                case CreateDynamicState
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                simplify
                                                solve( (<<old_keys, latest>, ~new_rootkey> =
                                                        <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                       (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                  case case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.2, latest.2>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                      <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys, latest>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                    <<old_keys, latest>, ~new_rootkey>)  ∥
                                                   (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                              case case_1
                                              by contradiction /* cyclic */
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                             ~new_rootkey.1> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.2
                                                            >)  ∥
                                                           (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.4>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                    <<old_keys, latest>, ~new_rootkey>)  ∥
                                                   (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                              case case_1
                                              by contradiction /* cyclic */
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                             ~new_rootkey.1> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.2
                                                            >)  ∥
                                                           (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.4>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                    <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* cyclic */
                                              next
                                                case CreateDynamicState
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                simplify
                                                solve( (<<old_keys, latest>, ~new_rootkey> =
                                                        <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                       (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                  case case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.2, latest.2>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                      <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.9)  ∥ (#vr.9 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys, latest>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                    <<old_keys, latest>, ~new_rootkey>)  ∥
                                                   (#vr < #vr.10)  ∥ (#vr.10 < #vr) )
                                              case case_1
                                              by contradiction /* cyclic */
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                             ~new_rootkey.1> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.2
                                                            >)  ∥
                                                           (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.4>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                    <<old_keys, latest>, ~new_rootkey>)  ∥
                                                   (#vr < #vr.10)  ∥ (#vr.10 < #vr) )
                                              case case_1
                                              by contradiction /* cyclic */
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case case_3
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    simplify
                                                    solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                             ~new_rootkey.1> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.2
                                                            >)  ∥
                                                           (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                      case case_1
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.4>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                  case CompromiseDevice
                  solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.1 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.1 )
                                case CreateDynamicState
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i3 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr.3) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                     ) @ #j.1 )
                                case CreateDynamicState
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CompromiseDevice
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                                             ) @ #j.1 )
                                        case CreateDynamicState
                                        solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                              <old_keys, latest>
                                               ) ▶₀ #i2 )
                                          case CompromiseDynamicStateA
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2
                                                 ) @ #j.1 )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys.1, latest.1>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case CreateDynamicState
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              simplify
                                              solve( (<<old_keys, latest>, ~new_rootkey> =
                                                      <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.2, latest.2>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i3 )
                                            case CompromiseDynamicStateA
                                            by contradiction /* cyclic */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Sender
                                            solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                    <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                   (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                              case case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys, latest>, 
                                                                       ~new_rootkey.2>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys.1, latest.1>, 
                                                                       ~new_rootkey.3>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_3
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr.3 < #vr.11)  ∥ (#vr.11 < #vr.3) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.2, latest.2
                                                                             >, 
                                                                             ~new_rootkey.4>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr.3 < #vr.11)  ∥ (#vr.11 < #vr.3) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.2, latest.2
                                                                             >, 
                                                                             ~new_rootkey.4>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Sender
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (¬(#j.1 < #j.2))  ∥ (¬(#j.2 < #i3)) )
          case case_1
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                       ~uidB.1, ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5) )
                  case case_1
                  solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                      ) @ #i2 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.2 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              by contradiction /* from formulas */
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case CreateDynamicState
                                    solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                               ~idB.1, rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                        case CompromiseDevice
                                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2
                                                 ) @ #j.2 )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i2 )
                                              case CompromiseDynamicStateA
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys, latest>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys, latest>, 
                                                                       ~new_rootkey.2>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.10 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.10 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.11)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.11) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.12 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.11)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.11) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Sender
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                     ~idB, rk2
                                                 ) @ #j.2 )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i2 )
                                              case CompromiseDynamicStateA
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.10 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.10 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys, latest>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys, latest>, 
                                                                       ~new_rootkey.2>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.9 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.9 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.10)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.10) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j.1 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys.1, latest.1>, 
                                                                           ~new_rootkey.3>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( (∃ rk7 #l.
                                                             (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ rk7 #l.
                                                             (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                           rk7
                                                              ) @ #l))  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                            ∧
                                                             #vr.11 < #l)  ∥
                                                           (∃ #l.
                                                             (CompromiseDevice( ~uidB, ~idB
                                                              ) @ #l)) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_3
                                                      by contradiction /* from formulas */
                                                    next
                                                      case case_4
                                                      by contradiction /* from formulas */
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              solve( (∃ rk2 #j.
                                                       (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.10)  ∥
                                                     (∃ rk2 #j.
                                                       (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                        ) @ #j)
                                                      ∧
                                                       #j < #vr.10) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Sender
                                              by contradiction /* from formulas */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                    case CompromiseDevice
                    solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                          ) @ #i2 )
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr.3) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                 ) @ #j.2 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                 rk2.1
                                             ) @ #j.2 )
                                        case CreateDynamicState
                                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.2 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB,
                                                                      <<old_keys.1, latest.1>, 
                                                                       ~new_rootkey.2>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.11 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.11 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB,
                                                                    <<old_keys, latest>, 
                                                                     ~new_rootkey.2>
                                                     ) ▶₀ #i4 )
                                                case CompromiseDynamicStateB
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (∃ rk7 #l.
                                                       (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l)
                                                      ∧
                                                       #vr.10 < #l)  ∥
                                                     (∃ rk7 #l.
                                                       (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l))  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                      ∧
                                                       #vr.10 < #l)  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j.1 )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB,
                                                                        <<old_keys.1, latest.1>, 
                                                                         ~new_rootkey.3>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                   ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateB( ~cid, ~sid.3, ~uidA.1, ~idA.1,
                                                       ~uidB.1, ~idB.1, rk2
                          ) @ #j)
                        ∧
                         #j < #i5) )
                  case case_1
                  solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                    case case_1
                    solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.1 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                        ) @ #i2 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                        ) @ #i2 )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (#j.3 = #i3)  ∥ (#i3 < #j.3) )
                      case case_1
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.2 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                by contradiction /* from formulas */
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                  rk2
                                              ) @ #i3 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   <old_keys.1, latest.1>,
                                                   <<old_keys.1, latest.1>, ~new_rootkey.1>
                             ) ▶₁ #i3 )
                        case AttackerUpdateDynamicStateB_Sender
                        solve( (∃ rk2 #j.
                                 (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                           rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr)  ∥
                               (∃ rk2 #j.
                                 (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                               ~idB, rk2
                                  ) @ #j)
                                ∧
                                 #j < #vr) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case UpdateDynamicStateB_Sender
                        solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                               ) @ #j.3 )
                          case AttackerCreateDynamicStateA
                          by contradiction /* from formulas */
                        next
                          case AttackerCreateDynamicStateB
                          solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                            case CompromiseDevice
                            by contradiction /* from formulas */
                          qed
                        next
                          case CreateDynamicState
                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                            case CreateUserDevice
                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CreateUserDevice
                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                     ) @ #j.2 )
                                case AttackerCreateDynamicStateA
                                by contradiction /* from formulas */
                              next
                                case AttackerCreateDynamicStateB
                                by contradiction /* from formulas */
                              next
                                case CreateDynamicState
                                solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                  case CreateUserDevice
                                  solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                    case CreateUserDevice
                                    solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                               rk2.1
                                           ) @ #j.3 )
                                      case AttackerCreateDynamicStateA
                                      solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CompromiseDevice
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case AttackerCreateDynamicStateB
                                      by contradiction /* from formulas */
                                    next
                                      case CreateDynamicState
                                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                        case CreateUserDevice
                                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                          case CreateUserDevice
                                          solve( CreateDynamicState( ~sid.3, ~uidA.1, ~idA.1,
                                                                     ~uidB.1, ~idB.1, rk2.1
                                                 ) @ #j.4 )
                                            case AttackerCreateDynamicStateA
                                            solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                              case CompromiseDevice
                                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                                case CreateUserDevice
                                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                           ~uidB, ~idB, rk2
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i2 )
                                                    case CompromiseDynamicStateA
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.2,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case AttackerCreateDynamicStateB
                                            by contradiction /* from formulas */
                                          next
                                            case CreateDynamicState
                                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.4 )
                                              case CreateUserDevice
                                              solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.4 )
                                                case CreateUserDevice
                                                solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                           ~uidB, ~idB, rk2
                                                       ) @ #j.2 )
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i2 )
                                                    case CompromiseDynamicStateA
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.10)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.1,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                                 ~uidB, ~idB, rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i3 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_1
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Receiver_case_2
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA,
                                                                                  ~idA, ~uidB, ~idB,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i4 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.10)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateB( ~cid.1,
                                                                                           ~sid,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.10) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j )
                    case CompromiseDevice
                    solve( (#j.2 = #i2)  ∥ (#i2 < #j.2) )
                      case case_1
                      solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                        case case_1
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.1 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i2 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2
                      solve( (#j.3 = #i3)  ∥ (#i3 < #j.3) )
                        case case_1
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.2 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB,
                                                                      ~idB, rk2
                                                  ) @ #i3 )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     <old_keys.1, latest.1>,
                                                     <<old_keys.1, latest.1>, ~new_rootkey.1>
                               ) ▶₁ #i3 )
                          case AttackerUpdateDynamicStateB_Sender
                          solve( (∃ rk2 #j.
                                   (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3)  ∥
                                 (∃ rk2 #j.
                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                                 ~idB, rk2
                                    ) @ #j)
                                  ∧
                                   #j < #vr.3) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case UpdateDynamicStateB_Sender
                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                                   ) @ #j.3 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CompromiseDevice
                                by contradiction /* from formulas */
                              qed
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2.1
                                               ) @ #j.3 )
                                          case AttackerCreateDynamicStateA
                                          solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                            case CompromiseDevice
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case AttackerCreateDynamicStateB
                                          by contradiction /* from formulas */
                                        next
                                          case CreateDynamicState
                                          solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.3 )
                                            case CreateUserDevice
                                            solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.3 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.2 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <<old_keys, latest>, 
                                                                           ~new_rootkey.2>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.2 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.4>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <
                                                                                 <old_keys.2, 
                                                                                  latest.2>, 
                                                                                 ~new_rootkey.4>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case CompromiseDynamicStateA
    solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
      case case_1
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i3)) )
          case case_1
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                           <old_keys.1, latest.1>,
                                           <<old_keys.1, latest.1>, ~new_rootkey.1>
                     ) ▶₁ #i3 )
                case AttackerUpdateDynamicStateB_Sender
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   rk2
                          ) @ #j)
                        ∧
                         #j < #vr)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                       ~idB, rk2
                          ) @ #j)
                        ∧
                         #j < #vr) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                    case CompromiseDevice
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case UpdateDynamicStateB_Sender
                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                       ) @ #j )
                  case AttackerCreateDynamicStateA
                  by contradiction /* from formulas */
                next
                  case AttackerCreateDynamicStateB
                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                    case CompromiseDevice
                    by contradiction /* from formulas */
                  qed
                next
                  case CreateDynamicState
                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                    case CreateUserDevice
                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CreateUserDevice
                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                             ) @ #j )
                        case CreateDynamicState
                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j )
                          case CreateDynamicState
                          solve( (∃ rk7 #l.
                                   (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                  ∧
                                   #i2 < #l)  ∥
                                 (∃ rk7 #l. (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                 (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                 (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                case case_1
                solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                             <old_keys.1, latest.1>,
                                             <<old_keys.1, latest.1>, ~new_rootkey.1>
                       ) ▶₁ #i3 )
                  case AttackerUpdateDynamicStateB_Sender
                  solve( (∃ rk2 #j.
                           (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     rk2
                            ) @ #j)
                          ∧
                           #j < #vr)  ∥
                         (∃ rk2 #j.
                           (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                         ~idB, rk2
                            ) @ #j)
                          ∧
                           #j < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case UpdateDynamicStateB_Sender
                  solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                         ) @ #j )
                    case AttackerCreateDynamicStateA
                    by contradiction /* from formulas */
                  next
                    case AttackerCreateDynamicStateB
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  next
                    case CreateDynamicState
                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                      case CreateUserDevice
                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j )
                          case CreateDynamicState
                          by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                    ) @ #i3 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                             <old_keys.1, latest.1>,
                                             <<old_keys.1, latest.1>, ~new_rootkey.1>
                       ) ▶₁ #i3 )
                  case AttackerUpdateDynamicStateB_Sender
                  solve( (∃ rk2 #j.
                           (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     rk2
                            ) @ #j)
                          ∧
                           #j < #vr)  ∥
                         (∃ rk2 #j.
                           (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                         ~idB, rk2
                            ) @ #j)
                          ∧
                           #j < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case UpdateDynamicStateB_Sender
                  solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                         ) @ #j.1 )
                    case AttackerCreateDynamicStateA
                    by contradiction /* from formulas */
                  next
                    case AttackerCreateDynamicStateB
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  next
                    case CreateDynamicState
                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                      case CreateUserDevice
                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                               ) @ #j )
                          case CreateDynamicState
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case AttackerCreateDynamicStateB
                            by contradiction /* from formulas */
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2.1
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  by contradiction /* from formulas */
                                next
                                  case AttackerCreateDynamicStateB
                                  solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.2 )
                                    case CompromiseDevice
                                    solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                                             ) @ #j )
                                        case CreateDynamicState
                                        solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                              <old_keys, latest>
                                               ) ▶₀ #i2 )
                                          case CompromiseDynamicStateA
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2
                                                 ) @ #j )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys.1, latest.1>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case CreateDynamicState
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              simplify
                                              solve( (<<old_keys, latest>, ~new_rootkey> =
                                                      <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                          ~uidB.1, ~idB.1,
                                                                          <~rk, ~next_rk>
                                                           ) ▶₀ #i5 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.3,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.3,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.3,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.3,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.2, latest.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                          ~uidB.1, ~idB.1,
                                                                          <~rk, ~next_rk>
                                                           ) ▶₀ #i5 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.3,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.3,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.3,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.3,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i3 )
                                            case CompromiseDynamicStateA
                                            by contradiction /* cyclic */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Sender
                                            solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                    <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                   (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                              case case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                        ~uidB.1, ~idB.1,
                                                                        <~rk.1, ~next_rk.1>
                                                         ) ▶₀ #i5 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                        ~uidB.1, ~idB.1,
                                                                        <~rk.1, ~next_rk.1>
                                                         ) ▶₀ #i5 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_3
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.2, latest.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.2, latest.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Sender
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                                             ) @ #j )
                                        case CreateDynamicState
                                        solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                              <old_keys, latest>
                                               ) ▶₀ #i2 )
                                          case CompromiseDynamicStateA
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2
                                                 ) @ #j )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys.1, latest.1>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case CreateDynamicState
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              simplify
                                              solve( (<<old_keys, latest>, ~new_rootkey> =
                                                      <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                          ~uidB.1, ~idB.1,
                                                                          <~rk, ~next_rk>
                                                           ) ▶₀ #i5 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.2, latest.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                          ~uidB.1, ~idB.1,
                                                                          <~rk, ~next_rk>
                                                           ) ▶₀ #i5 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* cyclic */
                                                    next
                                                      case CreateDynamicState
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i3 )
                                            case CompromiseDynamicStateA
                                            by contradiction /* cyclic */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Sender
                                            solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                    <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                   (#i2 < #vr.9)  ∥ (#vr.9 < #i2) )
                                              case case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                        ~uidB.1, ~idB.1,
                                                                        <~rk.1, ~next_rk.1>
                                                         ) ▶₀ #i5 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.1,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.1,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                        ~uidB.1, ~idB.1,
                                                                        <~rk.1, ~next_rk.1>
                                                         ) ▶₀ #i5 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* cyclic */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.1,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.1,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_3
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr < #vr.10)  ∥ (#vr.10 < #vr) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.2, latest.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.10)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.10) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr < #vr.10)  ∥ (#vr.10 < #vr) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.2, latest.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.10)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.10) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Sender
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (¬(#j.1 < #j.2))  ∥ (¬(#j.2 < #i3)) )
          case case_1
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                solve( (#j.1 = #i2)  ∥ (#i2 < #j.1) )
                  case case_1
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                           ) @ #j )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CreateUserDevice
                          by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                    ) @ #i2 )
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                           ) @ #j.1 )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            by contradiction /* from formulas */
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.1 )
                                  case CreateDynamicState
                                  solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                             ~idB.1, rk2.1
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    by contradiction /* from formulas */
                                  next
                                    case AttackerCreateDynamicStateB
                                    solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.2 )
                                      case CompromiseDevice
                                      solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  simplify
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  simplify
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.3, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.3,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  simplify
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  simplify
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.3, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.3,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.11 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.11 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys, latest>
                                                     ) ▶₀ #i4 )
                                                case CompromiseDynamicStateB
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateB_Receiver_OOO_case_1
                                                simplify
                                                solve( (<<~rk.1, ~next_rk.1>, ~new_rootkey.1> =
                                                        <<old_keys, latest>, ~new_rootkey.2>)  ∥
                                                       (#i3 < #vr.11)  ∥ (#vr.11 < #i3) )
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_OOO_case_2
                                                simplify
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_case_1
                                                simplify
                                                solve( (<<~rk.1, ~next_rk.1>, ~new_rootkey.1> =
                                                        <<old_keys, latest>, ~new_rootkey.2>)  ∥
                                                       (#i3 < #vr.11)  ∥ (#vr.11 < #i3) )
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_case_2
                                                simplify
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (∃ rk7 #l.
                                                       (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l)
                                                      ∧
                                                       #vr.10 < #l)  ∥
                                                     (∃ rk7 #l.
                                                       (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l))  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                      ∧
                                                       #vr.10 < #l)  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.13)  ∥ (#vr.13 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.13)  ∥ (#vr.13 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.13)  ∥ (#vr.13 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.13)  ∥ (#vr.13 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  simplify
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i3 < #vr.11)  ∥ (#vr.11 < #i3) )
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  simplify
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  simplify
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i3 < #vr.11)  ∥ (#vr.11 < #i3) )
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateA_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  simplify
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.10 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.10 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys, latest>
                                                     ) ▶₀ #i4 )
                                                case CompromiseDynamicStateB
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateB_Receiver_OOO_case_1
                                                simplify
                                                solve( (<<~rk.1, ~next_rk.1>, ~new_rootkey.1> =
                                                        <<old_keys, latest>, ~new_rootkey.2>)  ∥
                                                       (#i3 < #vr.10)  ∥ (#vr.10 < #i3) )
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_OOO_case_2
                                                simplify
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.10)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.10) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_case_1
                                                simplify
                                                solve( (<<~rk.1, ~next_rk.1>, ~new_rootkey.1> =
                                                        <<old_keys, latest>, ~new_rootkey.2>)  ∥
                                                       (#i3 < #vr.10)  ∥ (#vr.10 < #i3) )
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_case_2
                                                simplify
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.10)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.10) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (∃ rk7 #l.
                                                       (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l)
                                                      ∧
                                                       #vr.9 < #l)  ∥
                                                     (∃ rk7 #l.
                                                       (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l))  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                      ∧
                                                       #vr.9 < #l)  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (#j.1 = #i2)  ∥ (#i2 < #j.1) )
                  case case_1
                  solve( (#j = #i3)  ∥ (#i3 < #j) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                            case CreateUserDevice
                            by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                      ) @ #i2 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                            case CreateUserDevice
                            by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                      ) @ #i2 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                   ) @ #j.1 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              by contradiction /* from formulas */
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i3 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.2 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.1 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              by contradiction /* from formulas */
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CompromiseDevice
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                                   ~idB.1, rk2.1
                                               ) @ #j.3 )
                                          case AttackerCreateDynamicStateA
                                          by contradiction /* from formulas */
                                        next
                                          case AttackerCreateDynamicStateB
                                          solve( !CompromisedDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                            case CompromiseDevice
                                            solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk.1, ~next_rk.1>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.3,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.3,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.3,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.3,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.2, latest.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk, ~next_rk>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.3,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.3,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.3,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.3,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.3, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <~rk.2, ~next_rk.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO_case_1
                                                      solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateA( ~cid.2,
                                                                                         ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.11)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_case_1
                                                      solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateA( ~cid.2,
                                                                                         ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.11)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Sender
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk.1, ~next_rk.1>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk.1, ~next_rk.1>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.2, 
                                                                                 latest.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <~rk, ~next_rk>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateA( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateA
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateA( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateA
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk.1, ~next_rk.1>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.2, 
                                                                                 latest.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <~rk, ~next_rk>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateA( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateA
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateA( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateA
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case CreateDynamicState
                                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                            case CreateUserDevice
                                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk.1, ~next_rk.1>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.2, latest.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk, ~next_rk>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case CreateDynamicState
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.3, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <~rk.2, ~next_rk.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* cyclic */
                                                      next
                                                        case CreateDynamicState
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO_case_1
                                                      solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateA( ~cid.1,
                                                                                         ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.10)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_case_1
                                                      solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateA_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateA( ~cid.1,
                                                                                         ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.10)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Sender
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk.1, ~next_rk.1>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateA
                                                          by contradiction /* cyclic */
                                                        next
                                                          case CreateDynamicState
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateA_Sender
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk.1, ~next_rk.1>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case CreateDynamicState
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.2, 
                                                                                 latest.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <~rk, ~next_rk>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case CreateDynamicState
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateA( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateA
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateA_Sender
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateA( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateA
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateA_Sender
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk.1, ~next_rk.1>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateA
                                                            by contradiction /* cyclic */
                                                          next
                                                            case CreateDynamicState
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateA
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateA_Sender
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.2, 
                                                                                 latest.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateA( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <~rk, ~next_rk>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateA
                                                              by contradiction /* cyclic */
                                                            next
                                                              case CreateDynamicState
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateA( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateA
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateA_Sender
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateA( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateA
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateA_Sender
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case CompromiseDynamicStateB
    solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
      case case_1
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i3)) )
          case case_1
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                           <old_keys.1, latest.1>,
                                           <<old_keys.1, latest.1>, ~new_rootkey.1>
                     ) ▶₁ #i3 )
                case AttackerUpdateDynamicStateB_Sender
                solve( (∃ rk2 #j.
                         (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                   rk2
                          ) @ #j)
                        ∧
                         #j < #vr)  ∥
                       (∃ rk2 #j.
                         (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                       ~idB, rk2
                          ) @ #j)
                        ∧
                         #j < #vr) )
                  case case_1
                  by contradiction /* from formulas */
                next
                  case case_2
                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                    case CompromiseDevice
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case UpdateDynamicStateB_Sender
                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                       ) @ #j )
                  case AttackerCreateDynamicStateA
                  by contradiction /* from formulas */
                next
                  case AttackerCreateDynamicStateB
                  solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                    case CompromiseDevice
                    by contradiction /* from formulas */
                  qed
                next
                  case CreateDynamicState
                  solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                    case CreateUserDevice
                    solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CreateUserDevice
                      solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                             ) @ #j )
                        case CreateDynamicState
                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j )
                          case CreateDynamicState
                          solve( (∃ rk7 #l.
                                   (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l)
                                  ∧
                                   #i2 < #l)  ∥
                                 (∃ rk7 #l. (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7 ) @ #l))  ∥
                                 (∃ #l. (CompromiseDevice( ~uidA, ~idA ) @ #l) ∧ #i2 < #l)  ∥
                                 (∃ #l. (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          next
                            case case_3
                            by contradiction /* from formulas */
                          next
                            case case_4
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.1))  ∥ (¬(#j.1 < #i2)) )
            case case_1
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.1 = #j)  ∥ (#j < #j.1) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.1 = #i3)  ∥ (#i3 < #j.1) )
                case case_1
                solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                             <old_keys.1, latest.1>,
                                             <<old_keys.1, latest.1>, ~new_rootkey.1>
                       ) ▶₁ #i3 )
                  case AttackerUpdateDynamicStateB_Sender
                  solve( (∃ rk2 #j.
                           (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     rk2
                            ) @ #j)
                          ∧
                           #j < #vr)  ∥
                         (∃ rk2 #j.
                           (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                         ~idB, rk2
                            ) @ #j)
                          ∧
                           #j < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case UpdateDynamicStateB_Sender
                  solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                         ) @ #j )
                    case AttackerCreateDynamicStateA
                    by contradiction /* from formulas */
                  next
                    case AttackerCreateDynamicStateB
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  next
                    case CreateDynamicState
                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                      case CreateUserDevice
                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                               ) @ #j )
                          case CreateDynamicState
                          by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                    ) @ #i3 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                             <old_keys.1, latest.1>,
                                             <<old_keys.1, latest.1>, ~new_rootkey.1>
                       ) ▶₁ #i3 )
                  case AttackerUpdateDynamicStateB_Sender
                  solve( (∃ rk2 #j.
                           (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                     rk2
                            ) @ #j)
                          ∧
                           #j < #vr)  ∥
                         (∃ rk2 #j.
                           (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                         ~idB, rk2
                            ) @ #j)
                          ∧
                           #j < #vr) )
                    case case_1
                    by contradiction /* from formulas */
                  next
                    case case_2
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case UpdateDynamicStateB_Sender
                  solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                         ) @ #j.1 )
                    case AttackerCreateDynamicStateA
                    by contradiction /* from formulas */
                  next
                    case AttackerCreateDynamicStateB
                    solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                      case CompromiseDevice
                      by contradiction /* from formulas */
                    qed
                  next
                    case CreateDynamicState
                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                      case CreateUserDevice
                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CreateUserDevice
                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                               ) @ #j )
                          case CreateDynamicState
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CompromiseDevice
                              by contradiction /* from formulas */
                            qed
                          next
                            case AttackerCreateDynamicStateB
                            by contradiction /* from formulas */
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                           ~idB.1, rk2.1
                                       ) @ #j.2 )
                                  case AttackerCreateDynamicStateA
                                  solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.2 )
                                    case CompromiseDevice
                                    solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                                             ) @ #j )
                                        case CreateDynamicState
                                        solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                              <old_keys, latest>
                                               ) ▶₀ #i2 )
                                          case CompromiseDynamicStateA
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2
                                                 ) @ #j )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys.1, latest.1>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case CreateDynamicState
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              simplify
                                              solve( (<<old_keys, latest>, ~new_rootkey> =
                                                      <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                          ~uidB.1, ~idB.1,
                                                                          <~rk, ~next_rk>
                                                           ) ▶₀ #i5 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.3,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.3,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.3,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.3,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.2, latest.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                          ~uidB.1, ~idB.1,
                                                                          <~rk, ~next_rk>
                                                           ) ▶₀ #i5 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.3,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.3,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.3,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.3,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i3 )
                                            case CompromiseDynamicStateA
                                            by contradiction /* cyclic */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Sender
                                            solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                    <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                   (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                              case case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                        ~uidB.1, ~idB.1,
                                                                        <~rk.1, ~next_rk.1>
                                                         ) ▶₀ #i5 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                        ~uidB.1, ~idB.1,
                                                                        <~rk.1, ~next_rk.1>
                                                         ) ▶₀ #i5 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_3
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.2, latest.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr < #vr.11)  ∥ (#vr.11 < #vr) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.12)  ∥ (#vr.12 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.2, latest.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.14) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.11) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Sender
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case AttackerCreateDynamicStateB
                                  by contradiction /* from formulas */
                                next
                                  case CreateDynamicState
                                  solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.2 )
                                    case CreateUserDevice
                                    solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.2 )
                                      case CreateUserDevice
                                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2
                                             ) @ #j )
                                        case CreateDynamicState
                                        solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                              <old_keys, latest>
                                               ) ▶₀ #i2 )
                                          case CompromiseDynamicStateA
                                          solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                     rk2
                                                 ) @ #j )
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys.1, latest.1>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* cyclic */
                                            next
                                              case CreateDynamicState
                                              by contradiction /* cyclic */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              simplify
                                              solve( (<<old_keys, latest>, ~new_rootkey> =
                                                      <<old_keys.1, latest.1>, ~new_rootkey.1>)  ∥
                                                     (#i2 < #vr.10)  ∥ (#vr.10 < #i2) )
                                                case case_1
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                          ~uidB.1, ~idB.1,
                                                                          <~rk, ~next_rk>
                                                           ) ▶₀ #i5 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.11) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_2
                                                solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                           ~idB, rk2
                                                       ) @ #j )
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.2, latest.2>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                          ~uidB.1, ~idB.1,
                                                                          <~rk, ~next_rk>
                                                           ) ▶₀ #i5 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.2, latest.2
                                                                               >, 
                                                                               ~new_rootkey.3>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              next
                                                case case_3
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i3 )
                                            case CompromiseDynamicStateA
                                            by contradiction /* cyclic */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case UpdateDynamicStateA_Sender
                                            solve( (<<~rk, ~next_rk>, ~new_rootkey> =
                                                    <<old_keys, latest>, ~new_rootkey.1>)  ∥
                                                   (#i2 < #vr.9)  ∥ (#vr.9 < #i2) )
                                              case case_1
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                        ~uidB.1, ~idB.1,
                                                                        <~rk.1, ~next_rk.1>
                                                         ) ▶₀ #i5 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.1,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.1,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_2
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                        ~uidB.1, ~idB.1,
                                                                        <~rk.1, ~next_rk.1>
                                                         ) ▶₀ #i5 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.1,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <
                                                                             <old_keys.1, latest.1
                                                                             >, 
                                                                             ~new_rootkey.3>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.1,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            next
                                              case case_3
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr < #vr.10)  ∥ (#vr.10 < #vr) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.2, latest.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_OOO_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.10)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.10) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_1
                                          solve( (<<old_keys.1, latest.1>, ~new_rootkey.2> =
                                                  <<old_keys, latest>, ~new_rootkey>)  ∥
                                                 (#vr < #vr.10)  ∥ (#vr.10 < #vr) )
                                            case case_1
                                            by contradiction /* cyclic */
                                          next
                                            case case_2
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          next
                                            case case_3
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* cyclic */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  simplify
                                                  solve( (<<<old_keys, latest>, ~new_rootkey>, 
                                                           ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i2 < #vr.11)  ∥ (#vr.11 < #i2) )
                                                    case case_1
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.2, latest.2>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk, ~next_rk>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.1 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.2, 
                                                                                    latest.2>, 
                                                                                   ~new_rootkey.4>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.1,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.13) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case UpdateDynamicStateA_Receiver_case_2
                                          solve( (∃ rk2 #j.
                                                   (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                             ~idA, ~uidB, ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.10)  ∥
                                                 (∃ rk2 #j.
                                                   (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                 ~uidA, ~idA, ~uidB,
                                                                                 ~idB, rk2
                                                    ) @ #j)
                                                  ∧
                                                   #j < #vr.10) )
                                            case case_1
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case UpdateDynamicStateA_Sender
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#j.1 = #j)  ∥ (#j < #j.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( (¬(#j.1 < #j.2))  ∥ (¬(#j.2 < #i3)) )
          case case_1
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                solve( (#j.1 = #i2)  ∥ (#i2 < #j.1) )
                  case case_1
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                           ) @ #j )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CreateUserDevice
                          by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                    ) @ #i2 )
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                               <old_keys.1, latest.1>,
                                               <<old_keys.1, latest.1>, ~new_rootkey.1>
                         ) ▶₁ #i3 )
                    case AttackerUpdateDynamicStateB_Sender
                    solve( (∃ rk2 #j.
                             (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                       rk2
                              ) @ #j)
                            ∧
                             #j < #vr)  ∥
                           (∃ rk2 #j.
                             (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                           ~idB, rk2
                              ) @ #j)
                            ∧
                             #j < #vr) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case UpdateDynamicStateB_Sender
                    solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                           ) @ #j.1 )
                      case AttackerCreateDynamicStateA
                      by contradiction /* from formulas */
                    next
                      case AttackerCreateDynamicStateB
                      solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                        case CompromiseDevice
                        by contradiction /* from formulas */
                      qed
                    next
                      case CreateDynamicState
                      solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                        case CreateUserDevice
                        solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CreateUserDevice
                          solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                 ) @ #j.1 )
                            case AttackerCreateDynamicStateA
                            by contradiction /* from formulas */
                          next
                            case AttackerCreateDynamicStateB
                            by contradiction /* from formulas */
                          next
                            case CreateDynamicState
                            solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                              case CreateUserDevice
                              solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                case CreateUserDevice
                                solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                       ) @ #j.1 )
                                  case CreateDynamicState
                                  solve( CreateDynamicState( ~sid.2, ~uidA.1, ~idA.1, ~uidB.1,
                                                             ~idB.1, rk2.1
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.2 )
                                      case CompromiseDevice
                                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  simplify
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  simplify
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.3, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.3,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  simplify
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  simplify
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.3, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.3,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.12) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.11 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.11 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys, latest>
                                                     ) ▶₀ #i4 )
                                                case CompromiseDynamicStateB
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateB_Receiver_OOO_case_1
                                                simplify
                                                solve( (<<~rk.1, ~next_rk.1>, ~new_rootkey.1> =
                                                        <<old_keys, latest>, ~new_rootkey.2>)  ∥
                                                       (#i3 < #vr.11)  ∥ (#vr.11 < #i3) )
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_OOO_case_2
                                                simplify
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_case_1
                                                simplify
                                                solve( (<<~rk.1, ~next_rk.1>, ~new_rootkey.1> =
                                                        <<old_keys, latest>, ~new_rootkey.2>)  ∥
                                                       (#i3 < #vr.11)  ∥ (#vr.11 < #i3) )
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_case_2
                                                simplify
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.11) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (∃ rk7 #l.
                                                       (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l)
                                                      ∧
                                                       #vr.10 < #l)  ∥
                                                     (∃ rk7 #l.
                                                       (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l))  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                      ∧
                                                       #vr.10 < #l)  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.13)  ∥ (#vr.13 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.13)  ∥ (#vr.13 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.13)  ∥ (#vr.13 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.13)  ∥ (#vr.13 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.2,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.2,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.13) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.12 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.2, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.2, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.11) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                   rk2
                                               ) @ #j.1 )
                                          case CreateDynamicState
                                          solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB, ~idB,
                                                                <old_keys, latest>
                                                 ) ▶₀ #i2 )
                                            case CompromiseDynamicStateA
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys.1, latest.1>
                                                     ) ▶₀ #i3 )
                                                case CompromiseDynamicStateA
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i4 )
                                                  case CompromiseDynamicStateB
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  by contradiction /* cyclic */
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_1
                                                  simplify
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i3 < #vr.11)  ∥ (#vr.11 < #i3) )
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_OOO_case_2
                                                  simplify
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_1
                                                  simplify
                                                  solve( (<<~rk, ~next_rk>, ~new_rootkey.1> =
                                                          <<old_keys.1, latest.1>, ~new_rootkey.2
                                                          >)  ∥
                                                         (#i3 < #vr.11)  ∥ (#vr.11 < #i3) )
                                                    case case_2
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <
                                                                               <old_keys.1, latest.1
                                                                               >, 
                                                                               ~new_rootkey.2>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        next
                                                          case UpdateDynamicStateB_Receiver
                                                          by contradiction /* from formulas */
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO
                                                          by contradiction /* cyclic */
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case case_3
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Receiver_case_2
                                                  simplify
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateA( ~cid.2, ~sid.1,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateA( ~cid.2,
                                                                                         ~sid.1,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateB_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_OOO_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Receiver_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case UpdateDynamicStateA_Sender
                                                solve( (∃ rk7 #l.
                                                         (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l)
                                                        ∧
                                                         #vr.10 < #l)  ∥
                                                       (∃ rk7 #l.
                                                         (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                          ) @ #l))  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                        ∧
                                                         #vr.10 < #l)  ∥
                                                       (∃ #l.
                                                         (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_3
                                                  by contradiction /* from formulas */
                                                next
                                                  case case_4
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          next
                                            case CreateDynamicState
                                            solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                                  <old_keys, latest>
                                                   ) ▶₀ #i3 )
                                              case CompromiseDynamicStateA
                                              by contradiction /* from formulas */
                                            next
                                              case CreateDynamicState
                                              solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                    ~idB, <old_keys, latest>
                                                     ) ▶₀ #i4 )
                                                case CompromiseDynamicStateB
                                                by contradiction /* from formulas */
                                              next
                                                case CreateDynamicState
                                                by contradiction /* cyclic */
                                              next
                                                case UpdateDynamicStateB_Receiver_OOO_case_1
                                                simplify
                                                solve( (<<~rk.1, ~next_rk.1>, ~new_rootkey.1> =
                                                        <<old_keys, latest>, ~new_rootkey.2>)  ∥
                                                       (#i3 < #vr.10)  ∥ (#vr.10 < #i3) )
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_OOO_case_2
                                                simplify
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.10)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.10) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_case_1
                                                simplify
                                                solve( (<<~rk.1, ~next_rk.1>, ~new_rootkey.1> =
                                                        <<old_keys, latest>, ~new_rootkey.2>)  ∥
                                                       (#i3 < #vr.10)  ∥ (#vr.10 < #i3) )
                                                  case case_2
                                                  solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j.1 )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <<old_keys, latest>, 
                                                                             ~new_rootkey.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      next
                                                        case UpdateDynamicStateB_Receiver
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO
                                                        by contradiction /* cyclic */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_3
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Receiver_case_2
                                                simplify
                                                solve( (∃ rk2 #j.
                                                         (CompromiseDynamicStateA( ~cid.1, ~sid.1,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.10)  ∥
                                                       (∃ rk2 #j.
                                                         (AttackerCreateDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                          ) @ #j)
                                                        ∧
                                                         #j < #vr.10) )
                                                  case case_1
                                                  by contradiction /* from formulas */
                                                qed
                                              next
                                                case UpdateDynamicStateB_Sender
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_OOO_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Receiver_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case UpdateDynamicStateA_Sender
                                              solve( (∃ rk7 #l.
                                                       (CompromiseA( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l)
                                                      ∧
                                                       #vr.9 < #l)  ∥
                                                     (∃ rk7 #l.
                                                       (CompromiseB( ~uidA, ~idA, ~uidB, ~idB, rk7
                                                        ) @ #l))  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                      ∧
                                                       #vr.9 < #l)  ∥
                                                     (∃ #l.
                                                       (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                case case_1
                                                by contradiction /* from formulas */
                                              next
                                                case case_2
                                                by contradiction /* from formulas */
                                              next
                                                case case_3
                                                by contradiction /* from formulas */
                                              next
                                                case case_4
                                                by contradiction /* from formulas */
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_OOO_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_1
                                            solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                       ~idB, rk2
                                                   ) @ #j )
                                              case CreateDynamicState
                                              solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys.1, latest.1>
                                                       ) ▶₀ #i3 )
                                                  case CompromiseDynamicStateA
                                                  by contradiction /* from formulas */
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateB( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys.1, latest.1>
                                                         ) ▶₀ #i4 )
                                                    case CompromiseDynamicStateB
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    by contradiction /* cyclic */
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_OOO_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_1
                                                    simplify
                                                    solve( (<<~rk, ~next_rk>, ~new_rootkey.2> =
                                                            <<old_keys.1, latest.1>, ~new_rootkey.3
                                                            >)  ∥
                                                           (#i3 < #vr.12)  ∥ (#vr.12 < #i3) )
                                                      case case_2
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys.1, 
                                                                                  latest.1>, 
                                                                                 ~new_rootkey.3>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case case_3
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Receiver_case_2
                                                    simplify
                                                    solve( (∃ rk2 #j.
                                                             (CompromiseDynamicStateA( ~cid.1,
                                                                                       ~sid.1,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12)  ∥
                                                           (∃ rk2 #j.
                                                             (AttackerCreateDynamicStateA( ~cid.1,
                                                                                           ~sid.1,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                              ) @ #j)
                                                            ∧
                                                             #j < #vr.12) )
                                                      case case_1
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateB_Sender
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  by contradiction /* from formulas */
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  solve( (∃ rk7 #l.
                                                           (CompromiseA( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ rk7 #l.
                                                           (CompromiseB( ~uidA, ~idA, ~uidB, ~idB,
                                                                         rk7
                                                            ) @ #l))  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidA, ~idA ) @ #l)
                                                          ∧
                                                           #vr.11 < #l)  ∥
                                                         (∃ #l.
                                                           (CompromiseDevice( ~uidB, ~idB ) @ #l)) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_3
                                                    by contradiction /* from formulas */
                                                  next
                                                    case case_4
                                                    by contradiction /* from formulas */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          next
                                            case UpdateDynamicStateA_Receiver_case_2
                                            solve( (∃ rk2 #j.
                                                     (CompromiseDynamicStateB( ~cid.1, ~sid, ~uidA,
                                                                               ~idA, ~uidB, ~idB,
                                                                               rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10)  ∥
                                                   (∃ rk2 #j.
                                                     (AttackerCreateDynamicStateB( ~cid.1, ~sid,
                                                                                   ~uidA, ~idA,
                                                                                   ~uidB, ~idB, rk2
                                                      ) @ #j)
                                                    ∧
                                                     #j < #vr.10) )
                                              case case_1
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case UpdateDynamicStateA_Sender
                                            by contradiction /* from formulas */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case case_2
          solve( (¬(#j < #j.2))  ∥ (¬(#j.2 < #i2)) )
            case case_1
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case case_2
            solve( (#j.2 = #j)  ∥ (#j < #j.2) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              solve( (#j.2 = #j.1)  ∥ (#j.1 < #j.2) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (#j.1 = #i2)  ∥ (#i2 < #j.1) )
                  case case_1
                  solve( (#j = #i3)  ∥ (#i3 < #j) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                            case CreateUserDevice
                            by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                      ) @ #i2 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                            case CreateUserDevice
                            by solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                      ) @ #i2 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (#j.2 = #i3)  ∥ (#i3 < #j.2) )
                    case case_1
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.1 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                   ) @ #j.1 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              by contradiction /* from formulas */
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  by solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB,
                                                                rk2
                                            ) @ #i3 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( !UpdateDynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                 <old_keys.1, latest.1>,
                                                 <<old_keys.1, latest.1>, ~new_rootkey.1>
                           ) ▶₁ #i3 )
                      case AttackerUpdateDynamicStateB_Sender
                      solve( (∃ rk2 #j.
                               (CompromiseDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB, ~idB,
                                                         rk2
                                ) @ #j)
                              ∧
                               #j < #vr)  ∥
                             (∃ rk2 #j.
                               (AttackerCreateDynamicStateB( ~cid.1, ~sid.1, ~uidA, ~idA, ~uidB,
                                                             ~idB, rk2
                                ) @ #j)
                              ∧
                               #j < #vr) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case UpdateDynamicStateB_Sender
                      solve( CreateDynamicState( ~sid, ~uidA, ~idA, ~uidB, ~idB, rk2.3
                             ) @ #j.2 )
                        case AttackerCreateDynamicStateA
                        by contradiction /* from formulas */
                      next
                        case AttackerCreateDynamicStateB
                        solve( !CompromisedDevice( ~uidB, ~idB ) ▶₁ #j )
                          case CompromiseDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case CreateDynamicState
                        solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j )
                          case CreateUserDevice
                          solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j )
                            case CreateUserDevice
                            solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB, ~idB, rk2
                                   ) @ #j.1 )
                              case AttackerCreateDynamicStateA
                              by contradiction /* from formulas */
                            next
                              case AttackerCreateDynamicStateB
                              by contradiction /* from formulas */
                            next
                              case CreateDynamicState
                              solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.1 )
                                case CreateUserDevice
                                solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.1 )
                                  case CreateUserDevice
                                  solve( CreateDynamicState( ~sid.2, ~uidA, ~idA, ~uidB, ~idB, rk2.1
                                         ) @ #j.2 )
                                    case AttackerCreateDynamicStateA
                                    solve( !CompromisedDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CompromiseDevice
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case AttackerCreateDynamicStateB
                                    by contradiction /* from formulas */
                                  next
                                    case CreateDynamicState
                                    solve( !UserDevice( ~uidA, ~idA ) ▶₀ #j.2 )
                                      case CreateUserDevice
                                      solve( !UserDevice( ~uidB, ~idB ) ▶₁ #j.2 )
                                        case CreateUserDevice
                                        solve( CreateDynamicState( ~sid.3, ~uidA.1, ~idA.1, ~uidB.1,
                                                                   ~idB.1, rk2.1
                                               ) @ #j.3 )
                                          case AttackerCreateDynamicStateA
                                          solve( !CompromisedDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                            case CompromiseDevice
                                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk.1, ~next_rk.1>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.3,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.3,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.3,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.3,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.2, latest.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk, ~next_rk>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.3,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.3,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.3,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.3,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.3, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <~rk.2, ~next_rk.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO_case_1
                                                      solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateA( ~cid.2,
                                                                                         ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.11)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_case_1
                                                      solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateA( ~cid.2,
                                                                                         ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.11)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.11) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Sender
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk.1, ~next_rk.1>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.12) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk.1, ~next_rk.1>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.2, 
                                                                                 latest.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <~rk, ~next_rk>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk.1, ~next_rk.1>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.13) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.2, 
                                                                                 latest.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <~rk, ~next_rk>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.14) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.2, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.2,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.11) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case AttackerCreateDynamicStateB
                                          by contradiction /* from formulas */
                                        next
                                          case CreateDynamicState
                                          solve( !UserDevice( ~uidA.1, ~idA.1 ) ▶₀ #j.3 )
                                            case CreateUserDevice
                                            solve( !UserDevice( ~uidB.1, ~idB.1 ) ▶₁ #j.3 )
                                              case CreateUserDevice
                                              solve( CreateDynamicState( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                         ~idB, rk2
                                                     ) @ #j.1 )
                                                case CreateDynamicState
                                                solve( DynamicStateA( ~sid, ~uidA, ~idA, ~uidB,
                                                                      ~idB, <old_keys, latest>
                                                       ) ▶₀ #i2 )
                                                  case CompromiseDynamicStateA
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys.1, latest.1>
                                                           ) ▶₀ #i3 )
                                                      case CompromiseDynamicStateA
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk.1, ~next_rk.1>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.2>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.2,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.2,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_OOO_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_1
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Receiver_case_2
                                                      by contradiction /* from formulas */
                                                    next
                                                      case UpdateDynamicStateA_Sender
                                                      solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.1 )
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.2, latest.2>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk, ~next_rk>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.2, 
                                                                                      latest.2>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.2,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.2,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case CreateDynamicState
                                                  solve( DynamicStateA( ~sid.1, ~uidA, ~idA, ~uidB,
                                                                        ~idB, <old_keys, latest>
                                                         ) ▶₀ #i3 )
                                                    case CompromiseDynamicStateA
                                                    by contradiction /* from formulas */
                                                  next
                                                    case CreateDynamicState
                                                    solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                          ~uidB, ~idB,
                                                                          <old_keys, latest>
                                                           ) ▶₀ #i4 )
                                                      case CompromiseDynamicStateB
                                                      by contradiction /* from formulas */
                                                    next
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.3, ~uidA.1, ~idA.1,
                                                                            ~uidB.1, ~idB.1,
                                                                            <~rk.2, ~next_rk.2>
                                                             ) ▶₀ #i5 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* cyclic */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO_case_1
                                                      solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_OOO_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateA( ~cid.1,
                                                                                         ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.10)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_case_1
                                                      solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                 ~idA, ~uidB, ~idB,
                                                                                 rk2
                                                             ) @ #j.2 )
                                                        case CreateDynamicState
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <
                                                                                 <old_keys, latest
                                                                                 >, 
                                                                                 ~new_rootkey.2>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          next
                                                            case UpdateDynamicStateB_Receiver
                                                            by contradiction /* from formulas */
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO
                                                            by contradiction /* cyclic */
                                                          qed
                                                        qed
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Receiver_case_2
                                                      solve( (∃ rk2 #j.
                                                               (CompromiseDynamicStateA( ~cid.1,
                                                                                         ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.10)  ∥
                                                             (∃ rk2 #j.
                                                               (AttackerCreateDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                ) @ #j)
                                                              ∧
                                                               #j < #vr.10) )
                                                        case case_1
                                                        by contradiction /* from formulas */
                                                      qed
                                                    next
                                                      case UpdateDynamicStateB_Sender
                                                      by contradiction /* from formulas */
                                                    qed
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_OOO_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_1
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Receiver_case_2
                                                    by contradiction /* from formulas */
                                                  next
                                                    case UpdateDynamicStateA_Sender
                                                    solve( CreateDynamicState( ~sid.1, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j.1 )
                                                      case CreateDynamicState
                                                      solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i4 )
                                                        case CompromiseDynamicStateB
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                              ~idA.1, ~uidB.1,
                                                                              ~idB.1,
                                                                              <~rk.1, ~next_rk.1>
                                                               ) ▶₀ #i5 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* cyclic */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* from formulas */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_OOO_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_1
                                                        solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.2 )
                                                          case CreateDynamicState
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <
                                                                                   <old_keys.1, 
                                                                                    latest.1>, 
                                                                                   ~new_rootkey.3>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            next
                                                              case UpdateDynamicStateB_Receiver
                                                              by contradiction /* from formulas */
                                                            next
                                                              case UpdateDynamicStateB_Receiver_OOO
                                                              by contradiction /* cyclic */
                                                            qed
                                                          qed
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Receiver_case_2
                                                        solve( (∃ rk2 #j.
                                                                 (CompromiseDynamicStateA( ~cid.1,
                                                                                           ~sid.2,
                                                                                           ~uidA,
                                                                                           ~idA,
                                                                                           ~uidB,
                                                                                           ~idB, rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11)  ∥
                                                               (∃ rk2 #j.
                                                                 (AttackerCreateDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                  ) @ #j)
                                                                ∧
                                                                 #j < #vr.11) )
                                                          case case_1
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateB_Sender
                                                        by contradiction /* from formulas */
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk.1, ~next_rk.1>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.2, 
                                                                                 latest.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <~rk, ~next_rk>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_OOO_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_1
                                                  solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                             ~uidB, ~idB, rk2
                                                         ) @ #j )
                                                    case CreateDynamicState
                                                    solve( CreateDynamicState( ~sid, ~uidA, ~idA,
                                                                               ~uidB, ~idB, rk2
                                                           ) @ #j )
                                                      case CreateDynamicState
                                                      solve( DynamicStateA( ~sid.1, ~uidA, ~idA,
                                                                            ~uidB, ~idB,
                                                                            <old_keys.1, latest.1>
                                                             ) ▶₀ #i3 )
                                                        case CompromiseDynamicStateA
                                                        by contradiction /* from formulas */
                                                      next
                                                        case CreateDynamicState
                                                        solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                              ~uidB, ~idB,
                                                                              <old_keys.1, latest.1>
                                                               ) ▶₀ #i4 )
                                                          case CompromiseDynamicStateB
                                                          by contradiction /* from formulas */
                                                        next
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                ~idA.1, ~uidB.1,
                                                                                ~idB.1,
                                                                                <~rk.1, ~next_rk.1>
                                                                 ) ▶₀ #i5 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* from formulas */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_OOO_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_1
                                                          solve( CreateDynamicState( ~sid.2, ~uidA,
                                                                                     ~idA, ~uidB,
                                                                                     ~idB, rk2
                                                                 ) @ #j.2 )
                                                            case CreateDynamicState
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                    ~idA.1, ~uidB.1,
                                                                                    ~idB.1,
                                                                                    <
                                                                                     <old_keys.1, 
                                                                                      latest.1>, 
                                                                                     ~new_rootkey.3>
                                                                     ) ▶₀ #i5 )
                                                                case CompromiseDynamicStateB
                                                                by contradiction /* cyclic */
                                                              next
                                                                case UpdateDynamicStateB_Receiver
                                                                by contradiction /* from formulas */
                                                              next
                                                                case UpdateDynamicStateB_Receiver_OOO
                                                                by contradiction /* cyclic */
                                                              qed
                                                            qed
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Receiver_case_2
                                                          solve( (∃ rk2 #j.
                                                                   (CompromiseDynamicStateA( ~cid.1,
                                                                                             ~sid.2,
                                                                                             ~uidA,
                                                                                             ~idA,
                                                                                             ~uidB,
                                                                                             ~idB,
                                                                                             rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12)  ∥
                                                                 (∃ rk2 #j.
                                                                   (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                 ~sid.2,
                                                                                                 ~uidA,
                                                                                                 ~idA,
                                                                                                 ~uidB,
                                                                                                 ~idB,
                                                                                                 rk2
                                                                    ) @ #j)
                                                                  ∧
                                                                   #j < #vr.12) )
                                                            case case_1
                                                            by contradiction /* from formulas */
                                                          qed
                                                        next
                                                          case UpdateDynamicStateB_Sender
                                                          by contradiction /* from formulas */
                                                        qed
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_OOO_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_1
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Receiver_case_2
                                                        by contradiction /* from formulas */
                                                      next
                                                        case UpdateDynamicStateA_Sender
                                                        solve( CreateDynamicState( ~sid.1, ~uidA,
                                                                                   ~idA, ~uidB,
                                                                                   ~idB, rk2
                                                               ) @ #j.1 )
                                                          case CreateDynamicState
                                                          solve( DynamicStateB( ~sid.2, ~uidA, ~idA,
                                                                                ~uidB, ~idB,
                                                                                <old_keys.2, 
                                                                                 latest.2>
                                                                 ) ▶₀ #i4 )
                                                            case CompromiseDynamicStateB
                                                            by contradiction /* from formulas */
                                                          next
                                                            case CreateDynamicState
                                                            solve( DynamicStateB( ~sid.3, ~uidA.1,
                                                                                  ~idA.1, ~uidB.1,
                                                                                  ~idB.1,
                                                                                  <~rk, ~next_rk>
                                                                   ) ▶₀ #i5 )
                                                              case CompromiseDynamicStateB
                                                              by contradiction /* cyclic */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction
                                                                     /* from formulas */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_OOO_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_1
                                                            solve( CreateDynamicState( ~sid.2,
                                                                                       ~uidA, ~idA,
                                                                                       ~uidB, ~idB,
                                                                                       rk2
                                                                   ) @ #j.2 )
                                                              case CreateDynamicState
                                                              solve( CreateDynamicState( ~sid.2,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                                     ) @ #j.2 )
                                                                case CreateDynamicState
                                                                solve( DynamicStateB( ~sid.3,
                                                                                      ~uidA.1,
                                                                                      ~idA.1,
                                                                                      ~uidB.1,
                                                                                      ~idB.1,
                                                                                      <
                                                                                       <old_keys.2, 
                                                                                        latest.2>, 
                                                                                       ~new_rootkey.4
                                                                                      >
                                                                       ) ▶₀ #i5 )
                                                                  case CompromiseDynamicStateB
                                                                  by contradiction /* cyclic */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver
                                                                  by contradiction
                                                                     /* from formulas */
                                                                next
                                                                  case UpdateDynamicStateB_Receiver_OOO
                                                                  by contradiction /* cyclic */
                                                                qed
                                                              qed
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Receiver_case_2
                                                            solve( (∃ rk2 #j.
                                                                     (CompromiseDynamicStateA( ~cid.1,
                                                                                               ~sid.2,
                                                                                               ~uidA,
                                                                                               ~idA,
                                                                                               ~uidB,
                                                                                               ~idB,
                                                                                               rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13)  ∥
                                                                   (∃ rk2 #j.
                                                                     (AttackerCreateDynamicStateA( ~cid.1,
                                                                                                   ~sid.2,
                                                                                                   ~uidA,
                                                                                                   ~idA,
                                                                                                   ~uidB,
                                                                                                   ~idB,
                                                                                                   rk2
                                                                      ) @ #j)
                                                                    ∧
                                                                     #j < #vr.13) )
                                                              case case_1
                                                              by contradiction /* from formulas */
                                                            qed
                                                          next
                                                            case UpdateDynamicStateB_Sender
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Receiver_case_2
                                                  solve( (∃ rk2 #j.
                                                           (CompromiseDynamicStateB( ~cid.1, ~sid,
                                                                                     ~uidA, ~idA,
                                                                                     ~uidB, ~idB,
                                                                                     rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10)  ∥
                                                         (∃ rk2 #j.
                                                           (AttackerCreateDynamicStateB( ~cid.1,
                                                                                         ~sid,
                                                                                         ~uidA,
                                                                                         ~idA,
                                                                                         ~uidB,
                                                                                         ~idB, rk2
                                                            ) @ #j)
                                                          ∧
                                                           #j < #vr.10) )
                                                    case case_1
                                                    by contradiction /* from formulas */
                                                  qed
                                                next
                                                  case UpdateDynamicStateA_Sender
                                                  by contradiction /* from formulas */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma PROVE_OutOfOrderFrom2SessionsAgo:
  exists-trace
  "∃ sid1 sid2 sid3 uidA idA uidB idB rk1 rk2 rk3 rk4 rk5 #i #j #k
     #l.
    ((((((CreateDynamicState( sid1, uidA, idA, uidB, idB, rk1 ) @ #i) ∧
         (CreateDynamicState( sid2, uidA, idA, uidB, idB, rk2 ) @ #j)) ∧
        (#i < #j)) ∧
       (CreateDynamicState( sid3, uidA, idA, uidB, idB, rk3 ) @ #k)) ∧
      (#j < #k)) ∧
     (UpdateDynamicStateA_Receiver_OOO( sid1, uidA, idA, uidB, idB, rk4,
                                        rk5
      ) @ #l)) ∧
    (#k < #l)"
/*
guarded formula characterizing all satisfying traces:
"∃ sid1 sid2 sid3 uidA idA uidB idB rk1 rk2 rk3 rk4 rk5 #i #j #k
   #l.
  (CreateDynamicState( sid1, uidA, idA, uidB, idB, rk1 ) @ #i) ∧
  (CreateDynamicState( sid2, uidA, idA, uidB, idB, rk2 ) @ #j) ∧
  (CreateDynamicState( sid3, uidA, idA, uidB, idB, rk3 ) @ #k) ∧
  (UpdateDynamicStateA_Receiver_OOO( sid1, uidA, idA, uidB, idB, rk4,
                                     rk5
   ) @ #l)
 ∧
  (#i < #j) ∧ (#j < #k) ∧ (#k < #l)"
*/
by sorry







/*
WARNING: the following wellformedness checks failed!

Derivation Checks
=================

  Derivation checks timed out.
  Use --derivcheck-timeout=INT to configure timeout.
  Set to 0 to deactivate for no timeout.
*/

/*
Generated from:
Tamarin version 1.9.0
Maude version 3.2 (unsupported)
Git revision: ea7b979e436fc32f98369dd4e349fa0c6f1b1efd (with uncommited changes), branch: develop
Compiled at: 2024-07-10 11:47:09.315876473 UTC
*/

end